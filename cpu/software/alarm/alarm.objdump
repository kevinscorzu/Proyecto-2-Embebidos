
alarm.elf:     file format elf32-littlenios2
alarm.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002180

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x000010ec memsz 0x000010ec flags r-x
    LOAD off    0x0000210c vaddr 0x0000310c paddr 0x00003134 align 2**12
         filesz 0x00000028 memsz 0x00000028 flags rw-
    LOAD off    0x0000215c vaddr 0x0000315c paddr 0x0000315c align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000f8c  00002180  00002180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  0000310c  0000315c  00002134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000028  0000310c  00003134  0000210c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  0000315c  0000315c  0000215c  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  000032c0  000032c0  00002134  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00002134  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000278  00000000  00000000  00002168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00001fa3  00000000  00000000  000023e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000fc1  00000000  00000000  00004383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00001970  00000000  00000000  00005344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000398  00000000  00000000  00006cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00000f9d  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000de2  00000000  00000000  00007fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  00008dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001f8  00000000  00000000  00008de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0000a447  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000a44a  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000a44d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000a44e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0000a44f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0000a453  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0000a457  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0000a45b  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000053  00000000  00000000  0000a461  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .exceptions	00000000 .exceptions
00002180 l    d  .text	00000000 .text
0000310c l    d  .rodata	00000000 .rodata
0000310c l    d  .rwdata	00000000 .rwdata
0000315c l    d  .bss	00000000 .bss
000032c0 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/Users/leahy/Documents/TEC/II-SEM-2021/SistemasEmbebidos/Proyecto-2-Embebidos/cpu/software/alarm_bsp//obj/HAL/src/crt0.o
000021b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcpy.c
000031bc g     O .bss	00000004 alt_instruction_exception_handler
00003014 g     F .text	0000002c alt_main
00003168 g     O .bss	00000004 uartHour0Ptr
000031c0 g     O .bss	00000100 alt_irq
00003134 g       *ABS*	00000000 __flash_rwdata_start
00003130 g     O .rwdata	00000004 UART
00003160 g     O .bss	00000004 uartCounterPtr
00003194 g     O .bss	00000004 minPtr
00003180 g     O .bss	00000004 alarmHourPtr
000023d0 g     F .text	000000d8 configureTimeMode
00003188 g     O .bss	00000004 alarmSegPtr
000030dc g     F .text	00000008 altera_nios2_gen2_irq_init
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
000031a4 g     O .bss	00000004 btIncEdgeCapture
000031b4 g     O .bss	00000004 alt_argv
0000b10c g       *ABS*	00000000 _gp
000030e4 g     F .text	00000028 memcpy
00003124 g     O .rwdata	00000004 segS0Ptr
0000306c g     F .text	00000070 alt_exception_cause_generated_bad_addr
00002d4c g     F .text	00000064 .hidden __udivsi3
000031a8 g     O .bss	00000004 btModeEdgeCapture
0000317c g     O .bss	00000004 blinkPtr
00002638 g     F .text	00000094 countTime
00002f00 g     F .text	00000090 alt_irq_register
0000315c g     O .bss	00000004 uartValuePtr
000032c0 g       *ABS*	00000000 __bss_end
0000319c g     O .bss	00000004 modePtr
00002e98 g     F .text	00000068 alt_iic_isr_register
00002e80 g     F .text	00000018 alt_ic_irq_enabled
000031ac g     O .bss	00000004 alt_irq_active
000020fc g     F .exceptions	00000060 alt_irq_handler
00002958 g     F .text	0000007c changeMode
00003064 g     F .text	00000004 alt_dcache_flush_all
00003134 g       *ABS*	00000000 __ram_rwdata_end
00002834 g     F .text	00000054 handleTimer
000029d4 g     F .text	00000120 changeTime
0000310c g       *ABS*	00000000 __ram_rodata_end
00003198 g     O .bss	00000004 segPtr
00002db0 g     F .text	0000005c .hidden __umodsi3
000032c0 g       *ABS*	00000000 end
00002888 g     F .text	000000d0 showAlarmNumbers
0000215c g     F .exceptions	00000024 alt_instruction_exception_entry
00003400 g       *ABS*	00000000 __alt_stack_pointer
0000311c g     O .rwdata	00000004 segM0Ptr
00002180 g     F .text	0000003c _start
00003060 g     F .text	00000004 alt_sys_init
00002764 g     F .text	000000d0 showTimeNumbers
0000316c g     O .bss	00000004 uartMin1Ptr
0000310c g       *ABS*	00000000 __ram_rwdata_start
0000310c g       *ABS*	00000000 __ram_rodata_start
00003164 g     O .bss	00000004 uartHour1Ptr
000032c0 g       *ABS*	00000000 __alt_stack_base
00003174 g     O .bss	00000004 uartSeg1Ptr
00003190 g     O .bss	00000004 hourPtr
000021bc g     F .text	00000214 handleUart
0000315c g       *ABS*	00000000 __bss_start
00003120 g     O .rwdata	00000004 segS1Ptr
00002af4 g     F .text	00000164 main
00002000 g       *ABS*	00000000 __alt_mem_RAM
000031b0 g     O .bss	00000004 alt_envp
00003114 g     O .rwdata	00000004 segH0Ptr
00002c58 g     F .text	00000080 .hidden __divsi3
00003184 g     O .bss	00000004 alarmMinPtr
0000310c g       *ABS*	00000000 __flash_rodata_start
00003170 g     O .bss	00000004 uartMin0Ptr
00003040 g     F .text	00000020 alt_irq_init
00003128 g     O .rwdata	00000004 ramPtr
000031b8 g     O .bss	00000004 alt_argc
00003110 g     O .rwdata	00000004 segH1Ptr
00002020 g       .exceptions	00000000 alt_irq_entry
0000318c g     O .bss	00000004 configPtr
00002020 g       *ABS*	00000000 __ram_exceptions_start
00002e0c g     F .text	00000004 alt_ic_isr_register
00003134 g       *ABS*	00000000 _edata
000032c0 g       *ABS*	00000000 _end
00002180 g       *ABS*	00000000 __ram_exceptions_end
00002e48 g     F .text	00000038 alt_ic_irq_disable
00002cd8 g     F .text	00000074 .hidden __modsi3
00003400 g       *ABS*	00000000 __alt_data_end
00002020 g     F .exceptions	00000000 alt_exception
00003178 g     O .bss	00000004 uartSeg0Ptr
000024a8 g     F .text	000000d8 initializeInterrupts
0000200c g       .entry	00000000 _exit
000026cc g     F .text	00000098 numberToSeg7
00003068 g     F .text	00000004 alt_icache_flush_all
0000312c g     O .rwdata	00000004 alt_priority_mask
00002e10 g     F .text	00000038 alt_ic_irq_enable
0000310c g     O .rwdata	00000004 ledsPtr
00002580 g     F .text	000000b8 handleAlarm
00003118 g     O .rwdata	00000004 segM1Ptr
00002f90 g     F .text	00000084 alt_load
000031a0 g     O .bss	00000004 btSelEdgeCapture



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08486014 	ori	at,at,8576
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .exceptions:

00002020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    2020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    2024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    2028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    202c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    2030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    2034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    2038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    203c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    2040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    2044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    2048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    204c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    2050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    2054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    2058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    205c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    2060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    2064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    2068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    206c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    2070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    2074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    2078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    207c:	10000326 	beq	r2,zero,208c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    2080:	20000226 	beq	r4,zero,208c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    2084:	00020fc0 	call	20fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    2088:	00000706 	br	20a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    208c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    2090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    2094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    2098:	000215c0 	call	215c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    209c:	1000021e 	bne	r2,zero,20a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    20a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    20a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    20a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    20ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    20b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    20b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    20b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    20bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    20c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    20c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    20c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    20cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    20d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    20d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    20d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    20dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    20e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    20e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    20e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    20ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    20f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    20f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    20f8:	ef80083a 	eret

000020fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    20fc:	defffe04 	addi	sp,sp,-8
    2100:	dfc00115 	stw	ra,4(sp)
    2104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    2108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    210c:	04000034 	movhi	r16,0
    2110:	840c7004 	addi	r16,r16,12736
    i = 0;
    2114:	0005883a 	mov	r2,zero
    mask = 1;
    2118:	00c00044 	movi	r3,1
      if (active & mask)
    211c:	20ca703a 	and	r5,r4,r3
    2120:	28000b26 	beq	r5,zero,2150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
    2124:	100490fa 	slli	r2,r2,3
    2128:	8085883a 	add	r2,r16,r2
    212c:	10c00017 	ldw	r3,0(r2)
    2130:	11000117 	ldw	r4,4(r2)
    2134:	183ee83a 	callr	r3
    2138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    213c:	203ff51e 	bne	r4,zero,2114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    2140:	dfc00117 	ldw	ra,4(sp)
    2144:	dc000017 	ldw	r16,0(sp)
    2148:	dec00204 	addi	sp,sp,8
    214c:	f800283a 	ret
      mask <<= 1;
    2150:	1806907a 	slli	r3,r3,1
      i++;
    2154:	10800044 	addi	r2,r2,1
      if (active & mask)
    2158:	003ff006 	br	211c <alt_irq_handler+0x20>

0000215c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    215c:	d0a02c17 	ldw	r2,-32592(gp)
{
    2160:	200b883a 	mov	r5,r4
  if(alt_instruction_exception_handler) {
    2164:	10000326 	beq	r2,zero,2174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    2168:	000d883a 	mov	r6,zero
    216c:	013fffc4 	movi	r4,-1
    2170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    2174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    2178:	0005883a 	mov	r2,zero
    217c:	f800283a 	ret

Disassembly of section .text:

00002180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2184:	decd0014 	ori	sp,sp,13312
    movhi gp, %hi(_gp)
    2188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    218c:	d6ac4314 	ori	gp,gp,45324
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2194:	108c5714 	ori	r2,r2,12636

    movhi r3, %hi(__bss_end)
    2198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    219c:	18ccb014 	ori	r3,r3,12992

    beq r2, r3, 1f
    21a0:	10c00326 	beq	r2,r3,21b0 <_start+0x30>

0:
    stw zero, (r2)
    21a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    21a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    21ac:	10fffd36 	bltu	r2,r3,21a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    21b0:	0002f900 	call	2f90 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    21b4:	00030140 	call	3014 <alt_main>

000021b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    21b8:	003fff06 	br	21b8 <alt_after_alt_main>

000021bc <handleUart>:

}

void handleUart() {

  *uartValuePtr = IORD_ALTERA_AVALON_UART_RXDATA(UART);
    21bc:	00d42837 	ldwio	r3,20640(zero)
    21c0:	d0a01417 	ldw	r2,-32688(gp)
    21c4:	10c00005 	stb	r3,0(r2)

  IOWR_ALTERA_AVALON_UART_STATUS(UART, 0);
    21c8:	00142a35 	stwio	zero,20648(zero)

  IOWR_ALTERA_AVALON_UART_TXDATA(UART, *uartValuePtr);
    21cc:	d0a01417 	ldw	r2,-32688(gp)
    21d0:	10800003 	ldbu	r2,0(r2)
    21d4:	10803fcc 	andi	r2,r2,255
    21d8:	00942935 	stwio	r2,20644(zero)
  
  switch (*uartCounterPtr) {      
    21dc:	d0a01517 	ldw	r2,-32684(gp)
    21e0:	10800003 	ldbu	r2,0(r2)
    21e4:	10803fcc 	andi	r2,r2,255
    21e8:	10c001a8 	cmpgeui	r3,r2,6
    21ec:	18000f1e 	bne	r3,zero,222c <handleUart+0x70>
    21f0:	100490ba 	slli	r2,r2,2
    21f4:	00c00034 	movhi	r3,0
    21f8:	10c7883a 	add	r3,r2,r3
    21fc:	18888117 	ldw	r2,8708(r3)
    2200:	1000683a 	jmp	r2
    2204:	0000221c 	xori	zero,zero,136
    2208:	00002380 	call	238 <__alt_mem_RAM-0x1dc8>
    220c:	00002390 	cmplti	zero,zero,142
    2210:	000023a0 	cmpeqi	zero,zero,142
    2214:	000023b0 	cmpltui	zero,zero,142
    2218:	000023c0 	call	23c <__alt_mem_RAM-0x1dc4>
    case 0:
        *uartHour1Ptr = *uartValuePtr;
    221c:	d0a01417 	ldw	r2,-32688(gp)
    2220:	10c00003 	ldbu	r3,0(r2)
    2224:	d0a01617 	ldw	r2,-32680(gp)
      break;
    case 4:
        *uartSeg1Ptr = *uartValuePtr;
      break;
    case 5:
        *uartSeg0Ptr = *uartValuePtr;
    2228:	10c00005 	stb	r3,0(r2)
      break;
  }

  *uartCounterPtr += 1;
    222c:	d0e01517 	ldw	r3,-32684(gp)
    2230:	18800003 	ldbu	r2,0(r3)
    2234:	10800044 	addi	r2,r2,1
    2238:	18800005 	stb	r2,0(r3)

  if (*uartValuePtr == 'A') {
    223c:	d0a01417 	ldw	r2,-32688(gp)
    2240:	10800003 	ldbu	r2,0(r2)
    2244:	10803fcc 	andi	r2,r2,255
    2248:	10801058 	cmpnei	r2,r2,65
    224c:	1000231e 	bne	r2,zero,22dc <handleUart+0x120>

    *alarmHourPtr = ((*uartHour1Ptr - 48) * 10) + (*uartHour0Ptr - 48);
    2250:	d0a01617 	ldw	r2,-32680(gp)
    2254:	11000003 	ldbu	r4,0(r2)
    2258:	d0a01717 	ldw	r2,-32676(gp)
    225c:	10c00003 	ldbu	r3,0(r2)
    2260:	200490ba 	slli	r2,r4,2
    2264:	18fffc04 	addi	r3,r3,-16
    2268:	1105883a 	add	r2,r2,r4
    226c:	1004907a 	slli	r2,r2,1
    2270:	10c5883a 	add	r2,r2,r3
    2274:	d0e01d17 	ldw	r3,-32652(gp)
    2278:	18800005 	stb	r2,0(r3)
    *alarmMinPtr = ((*uartMin1Ptr - 48) * 10) + (*uartMin0Ptr - 48);
    227c:	d0a01817 	ldw	r2,-32672(gp)
    2280:	11000003 	ldbu	r4,0(r2)
    2284:	d0a01917 	ldw	r2,-32668(gp)
    2288:	10c00003 	ldbu	r3,0(r2)
    228c:	200490ba 	slli	r2,r4,2
    2290:	18fffc04 	addi	r3,r3,-16
    2294:	1105883a 	add	r2,r2,r4
    2298:	1004907a 	slli	r2,r2,1
    229c:	10c5883a 	add	r2,r2,r3
    22a0:	d0e01e17 	ldw	r3,-32648(gp)
    22a4:	18800005 	stb	r2,0(r3)
    *alarmSegPtr = ((*uartSeg1Ptr - 48) * 10) + (*uartSeg0Ptr - 48);
    22a8:	d0a01a17 	ldw	r2,-32664(gp)
    22ac:	11000003 	ldbu	r4,0(r2)
    22b0:	d0a01b17 	ldw	r2,-32660(gp)
    22b4:	10c00003 	ldbu	r3,0(r2)
    22b8:	200490ba 	slli	r2,r4,2
    22bc:	18fffc04 	addi	r3,r3,-16
    22c0:	1105883a 	add	r2,r2,r4
    22c4:	1004907a 	slli	r2,r2,1
    22c8:	10c5883a 	add	r2,r2,r3
    22cc:	d0e01f17 	ldw	r3,-32644(gp)
    22d0:	18800005 	stb	r2,0(r3)

    *uartCounterPtr = 0;
    22d4:	d0a01517 	ldw	r2,-32684(gp)
    22d8:	10000005 	stb	zero,0(r2)

  }
  
  if (*uartValuePtr == 'C') {
    22dc:	d0a01417 	ldw	r2,-32688(gp)
    22e0:	10800003 	ldbu	r2,0(r2)
    22e4:	10803fcc 	andi	r2,r2,255
    22e8:	108010d8 	cmpnei	r2,r2,67
    22ec:	1000231e 	bne	r2,zero,237c <handleUart+0x1c0>
    
    *hourPtr = ((*uartHour1Ptr - 48) * 10) + (*uartHour0Ptr - 48);
    22f0:	d0a01617 	ldw	r2,-32680(gp)
    22f4:	11000003 	ldbu	r4,0(r2)
    22f8:	d0a01717 	ldw	r2,-32676(gp)
    22fc:	10c00003 	ldbu	r3,0(r2)
    2300:	200490ba 	slli	r2,r4,2
    2304:	18fffc04 	addi	r3,r3,-16
    2308:	1105883a 	add	r2,r2,r4
    230c:	1004907a 	slli	r2,r2,1
    2310:	10c5883a 	add	r2,r2,r3
    2314:	d0e02117 	ldw	r3,-32636(gp)
    2318:	18800005 	stb	r2,0(r3)
    *minPtr = ((*uartMin1Ptr - 48) * 10) + (*uartMin0Ptr - 48);
    231c:	d0a01817 	ldw	r2,-32672(gp)
    2320:	11000003 	ldbu	r4,0(r2)
    2324:	d0a01917 	ldw	r2,-32668(gp)
    2328:	10c00003 	ldbu	r3,0(r2)
    232c:	200490ba 	slli	r2,r4,2
    2330:	18fffc04 	addi	r3,r3,-16
    2334:	1105883a 	add	r2,r2,r4
    2338:	1004907a 	slli	r2,r2,1
    233c:	10c5883a 	add	r2,r2,r3
    2340:	d0e02217 	ldw	r3,-32632(gp)
    2344:	18800005 	stb	r2,0(r3)
    *segPtr = ((*uartSeg1Ptr - 48) * 10) + (*uartSeg0Ptr - 48);
    2348:	d0a01a17 	ldw	r2,-32664(gp)
    234c:	11000003 	ldbu	r4,0(r2)
    2350:	d0a01b17 	ldw	r2,-32660(gp)
    2354:	10c00003 	ldbu	r3,0(r2)
    2358:	200490ba 	slli	r2,r4,2
    235c:	18fffc04 	addi	r3,r3,-16
    2360:	1105883a 	add	r2,r2,r4
    2364:	1004907a 	slli	r2,r2,1
    2368:	10c5883a 	add	r2,r2,r3
    236c:	d0e02317 	ldw	r3,-32628(gp)
    2370:	18800005 	stb	r2,0(r3)

    *uartCounterPtr = 0;
    2374:	d0a01517 	ldw	r2,-32684(gp)
    2378:	10000005 	stb	zero,0(r2)

  }

  return;

}
    237c:	f800283a 	ret
        *uartHour0Ptr = *uartValuePtr;
    2380:	d0a01417 	ldw	r2,-32688(gp)
    2384:	10c00003 	ldbu	r3,0(r2)
    2388:	d0a01717 	ldw	r2,-32676(gp)
    238c:	003fa606 	br	2228 <handleUart+0x6c>
        *uartMin1Ptr = *uartValuePtr;
    2390:	d0a01417 	ldw	r2,-32688(gp)
    2394:	10c00003 	ldbu	r3,0(r2)
    2398:	d0a01817 	ldw	r2,-32672(gp)
    239c:	003fa206 	br	2228 <handleUart+0x6c>
        *uartMin0Ptr = *uartValuePtr;
    23a0:	d0a01417 	ldw	r2,-32688(gp)
    23a4:	10c00003 	ldbu	r3,0(r2)
    23a8:	d0a01917 	ldw	r2,-32668(gp)
    23ac:	003f9e06 	br	2228 <handleUart+0x6c>
        *uartSeg1Ptr = *uartValuePtr;
    23b0:	d0a01417 	ldw	r2,-32688(gp)
    23b4:	10c00003 	ldbu	r3,0(r2)
    23b8:	d0a01a17 	ldw	r2,-32664(gp)
    23bc:	003f9a06 	br	2228 <handleUart+0x6c>
        *uartSeg0Ptr = *uartValuePtr;
    23c0:	d0a01417 	ldw	r2,-32688(gp)
    23c4:	10c00003 	ldbu	r3,0(r2)
    23c8:	d0a01b17 	ldw	r2,-32660(gp)
    23cc:	003f9606 	br	2228 <handleUart+0x6c>

000023d0 <configureTimeMode>:

}

void configureTimeMode() {

  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTSEL, 0);
    23d0:	00141f35 	stwio	zero,20604(zero)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BTSEL, 0xf);
    23d4:	008003c4 	movi	r2,15
    23d8:	00941e35 	stwio	r2,20600(zero)

  if (*modePtr == 1 || *modePtr == 2) {
    23dc:	d0e02417 	ldw	r3,-32624(gp)
    23e0:	18800003 	ldbu	r2,0(r3)
    23e4:	10803fcc 	andi	r2,r2,255
    23e8:	10800060 	cmpeqi	r2,r2,1
    23ec:	1000041e 	bne	r2,zero,2400 <configureTimeMode+0x30>
    23f0:	18800003 	ldbu	r2,0(r3)
    23f4:	10803fcc 	andi	r2,r2,255
    23f8:	10800098 	cmpnei	r2,r2,2
    23fc:	1000291e 	bne	r2,zero,24a4 <configureTimeMode+0xd4>
    *configPtr += 1;
    2400:	d0e02017 	ldw	r3,-32640(gp)
    2404:	18800003 	ldbu	r2,0(r3)
    2408:	10800044 	addi	r2,r2,1
    240c:	18800005 	stb	r2,0(r3)

    switch (*configPtr) {      
    2410:	d0a02017 	ldw	r2,-32640(gp)
    2414:	10800003 	ldbu	r2,0(r2)
    2418:	10803fcc 	andi	r2,r2,255
    241c:	10c000a0 	cmpeqi	r3,r2,2
    2420:	18000d1e 	bne	r3,zero,2458 <configureTimeMode+0x88>
    2424:	10c000e0 	cmpeqi	r3,r2,3
    2428:	1800141e 	bne	r3,zero,247c <configureTimeMode+0xac>
    242c:	10800058 	cmpnei	r2,r2,1
    2430:	10001c1e 	bne	r2,zero,24a4 <configureTimeMode+0xd4>
      case 1: 
        *ledsPtr = 0b00000110 & *ledsPtr;
    2434:	d0e00017 	ldw	r3,-32768(gp)
    2438:	18800003 	ldbu	r2,0(r3)
    243c:	1080018c 	andi	r2,r2,6
    2440:	18800005 	stb	r2,0(r3)
        *ledsPtr = 0b01000000 | *ledsPtr;
    2444:	d0e00017 	ldw	r3,-32768(gp)
    2448:	18800003 	ldbu	r2,0(r3)
    244c:	10801014 	ori	r2,r2,64

        break;

      case 2:
        *ledsPtr = 0b00000110 & *ledsPtr;
        *ledsPtr = 0b10000000 | *ledsPtr;
    2450:	18800005 	stb	r2,0(r3)

        break;
    2454:	f800283a 	ret
        *ledsPtr = 0b00000110 & *ledsPtr;
    2458:	d0e00017 	ldw	r3,-32768(gp)
        *ledsPtr = 0b10000000 | *ledsPtr;
    245c:	013fe004 	movi	r4,-128
        *ledsPtr = 0b00000110 & *ledsPtr;
    2460:	18800003 	ldbu	r2,0(r3)
    2464:	1080018c 	andi	r2,r2,6
    2468:	18800005 	stb	r2,0(r3)
        *ledsPtr = 0b10000000 | *ledsPtr;
    246c:	d0e00017 	ldw	r3,-32768(gp)
    2470:	18800003 	ldbu	r2,0(r3)
    2474:	1104b03a 	or	r2,r2,r4
    2478:	003ff506 	br	2450 <configureTimeMode+0x80>

      case 3:
        *ledsPtr = 0b00000110 & *ledsPtr;
    247c:	d0e00017 	ldw	r3,-32768(gp)
    2480:	18800003 	ldbu	r2,0(r3)
    2484:	1080018c 	andi	r2,r2,6
    2488:	18800005 	stb	r2,0(r3)
        *ledsPtr = 0b00100000 | *ledsPtr;
    248c:	d0e00017 	ldw	r3,-32768(gp)
    2490:	18800003 	ldbu	r2,0(r3)
    2494:	10800814 	ori	r2,r2,32
    2498:	18800005 	stb	r2,0(r3)
        *configPtr = 0;
    249c:	d0a02017 	ldw	r2,-32640(gp)
    24a0:	10000005 	stb	zero,0(r2)
    }
  }

  return;

}
    24a4:	f800283a 	ret

000024a8 <initializeInterrupts>:
void initializeInterrupts() {
    24a8:	defffe04 	addi	sp,sp,-8
    24ac:	dfc00115 	stw	ra,4(sp)
  IOWR_ALTERA_AVALON_UART_DIVISOR(UART, (ALTCPUFREQ / UARTBAUD) + 1);
    24b0:	00806cc4 	movi	r2,435
    24b4:	00942c35 	stwio	r2,20656(zero)
	IOWR_ALTERA_AVALON_UART_CONTROL(UART, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
    24b8:	00802004 	movi	r2,128
    24bc:	00942b35 	stwio	r2,20652(zero)
  alt_ic_isr_register(UARTIRQID, UARTIRQ, handleUart, 0, 0);
    24c0:	01800034 	movhi	r6,0
    24c4:	000f883a 	mov	r7,zero
    24c8:	31886f04 	addi	r6,r6,8636
    24cc:	d8000015 	stw	zero,0(sp)
    24d0:	000b883a 	mov	r5,zero
    24d4:	0009883a 	mov	r4,zero
    24d8:	0002e0c0 	call	2e0c <alt_ic_isr_register>
	alt_ic_irq_enable(UARTIRQID, UARTIRQ);
    24dc:	000b883a 	mov	r5,zero
    24e0:	0009883a 	mov	r4,zero
    24e4:	0002e100 	call	2e10 <alt_ic_irq_enable>
	alt_irq_register(TIMERIRQ, 0, handleTimer);
    24e8:	01800034 	movhi	r6,0
    24ec:	318a0d04 	addi	r6,r6,10292
    24f0:	000b883a 	mov	r5,zero
    24f4:	01000044 	movi	r4,1
    24f8:	0002f000 	call	2f00 <alt_irq_register>
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMERMODE,
    24fc:	008001c4 	movi	r2,7
    2500:	00900135 	stwio	r2,16388(zero)
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BTMODE, 0xf);
    2504:	008003c4 	movi	r2,15
    2508:	00941a35 	stwio	r2,20584(zero)
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BTINC, 0xf);
    250c:	00942235 	stwio	r2,20616(zero)
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BTSEL, 0xf);
    2510:	00941e35 	stwio	r2,20600(zero)
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTMODE, 0x0);
    2514:	00141b35 	stwio	zero,20588(zero)
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTINC, 0x0);
    2518:	00142335 	stwio	zero,20620(zero)
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTSEL, 0x0);
    251c:	00141f35 	stwio	zero,20604(zero)
  alt_ic_isr_register(BTMODEIRQID,
    2520:	01800034 	movhi	r6,0
    2524:	d8000015 	stw	zero,0(sp)
    2528:	d1e02704 	addi	r7,gp,-32612
    252c:	318a5604 	addi	r6,r6,10584
    2530:	01400084 	movi	r5,2
    2534:	0009883a 	mov	r4,zero
    2538:	0002e0c0 	call	2e0c <alt_ic_isr_register>
  alt_ic_isr_register(BTINCIRQID,
    253c:	01800034 	movhi	r6,0
    2540:	d8000015 	stw	zero,0(sp)
    2544:	d1e02604 	addi	r7,gp,-32616
    2548:	318a7504 	addi	r6,r6,10708
    254c:	01400104 	movi	r5,4
    2550:	0009883a 	mov	r4,zero
    2554:	0002e0c0 	call	2e0c <alt_ic_isr_register>
  alt_ic_isr_register(BTSELIRQID,
    2558:	01800034 	movhi	r6,0
    255c:	d8000015 	stw	zero,0(sp)
    2560:	d1e02504 	addi	r7,gp,-32620
    2564:	3188f404 	addi	r6,r6,9168
    2568:	014000c4 	movi	r5,3
    256c:	0009883a 	mov	r4,zero
    2570:	0002e0c0 	call	2e0c <alt_ic_isr_register>
}
    2574:	dfc00117 	ldw	ra,4(sp)
    2578:	dec00204 	addi	sp,sp,8
    257c:	f800283a 	ret

00002580 <handleAlarm>:
  if (*segPtr == *alarmSegPtr && *minPtr == *alarmMinPtr && *hourPtr == *alarmHourPtr) {
    2580:	d0a02317 	ldw	r2,-32628(gp)
    2584:	11000003 	ldbu	r4,0(r2)
    2588:	d0a01f17 	ldw	r2,-32644(gp)
    258c:	21003fcc 	andi	r4,r4,255
    2590:	10c00003 	ldbu	r3,0(r2)
    *blinkPtr = 10;
    2594:	d0a01c17 	ldw	r2,-32656(gp)
  if (*segPtr == *alarmSegPtr && *minPtr == *alarmMinPtr && *hourPtr == *alarmHourPtr) {
    2598:	18c03fcc 	andi	r3,r3,255
    259c:	20c0141e 	bne	r4,r3,25f0 <handleAlarm+0x70>
    25a0:	d0e02217 	ldw	r3,-32632(gp)
    25a4:	19000003 	ldbu	r4,0(r3)
    25a8:	d0e01e17 	ldw	r3,-32648(gp)
    25ac:	21003fcc 	andi	r4,r4,255
    25b0:	18c00003 	ldbu	r3,0(r3)
    25b4:	18c03fcc 	andi	r3,r3,255
    25b8:	20c00d1e 	bne	r4,r3,25f0 <handleAlarm+0x70>
    25bc:	d0e02117 	ldw	r3,-32636(gp)
    25c0:	19000003 	ldbu	r4,0(r3)
    25c4:	d0e01d17 	ldw	r3,-32652(gp)
    25c8:	21003fcc 	andi	r4,r4,255
    25cc:	18c00003 	ldbu	r3,0(r3)
    25d0:	18c03fcc 	andi	r3,r3,255
    25d4:	20c0061e 	bne	r4,r3,25f0 <handleAlarm+0x70>
    *blinkPtr = 10;
    25d8:	00c00284 	movi	r3,10
    25dc:	10c00005 	stb	r3,0(r2)
    *ledsPtr = 0b11111111;
    25e0:	d0a00017 	ldw	r2,-32768(gp)
    25e4:	00ffffc4 	movi	r3,-1
    *ledsPtr = 0b00000001;
    25e8:	10c00005 	stb	r3,0(r2)
}
    25ec:	f800283a 	ret
  else if (*blinkPtr != 0) {
    25f0:	10c00003 	ldbu	r3,0(r2)
    25f4:	18c03fcc 	andi	r3,r3,255
    25f8:	18000926 	beq	r3,zero,2620 <handleAlarm+0xa0>
    *ledsPtr = ~*ledsPtr;
    25fc:	d0e00017 	ldw	r3,-32768(gp)
    2600:	18800003 	ldbu	r2,0(r3)
    2604:	0084303a 	nor	r2,zero,r2
    2608:	18800005 	stb	r2,0(r3)
    *blinkPtr -= 1;
    260c:	d0e01c17 	ldw	r3,-32656(gp)
    2610:	18800003 	ldbu	r2,0(r3)
    2614:	10bfffc4 	addi	r2,r2,-1
    2618:	18800005 	stb	r2,0(r3)
    261c:	f800283a 	ret
  else if (*blinkPtr <= 0) {
    2620:	10800003 	ldbu	r2,0(r2)
    2624:	10803fcc 	andi	r2,r2,255
    2628:	103ff01e 	bne	r2,zero,25ec <handleAlarm+0x6c>
    *ledsPtr = 0b00000001;
    262c:	d0a00017 	ldw	r2,-32768(gp)
    2630:	00c00044 	movi	r3,1
    2634:	003fec06 	br	25e8 <handleAlarm+0x68>

00002638 <countTime>:

}

void countTime() {
  
  *segPtr += 1;
    2638:	d0e02317 	ldw	r3,-32628(gp)
    263c:	18800003 	ldbu	r2,0(r3)
    2640:	10800044 	addi	r2,r2,1
    2644:	18800005 	stb	r2,0(r3)
  
  if (*segPtr == 60) {
    2648:	d0a02317 	ldw	r2,-32628(gp)
    264c:	10800003 	ldbu	r2,0(r2)
    2650:	10803fcc 	andi	r2,r2,255
    2654:	10800f18 	cmpnei	r2,r2,60
    2658:	1000061e 	bne	r2,zero,2674 <countTime+0x3c>
    *minPtr += 1;
    265c:	d0e02217 	ldw	r3,-32632(gp)
    2660:	18800003 	ldbu	r2,0(r3)
    2664:	10800044 	addi	r2,r2,1
    2668:	18800005 	stb	r2,0(r3)
    *segPtr = 0;
    266c:	d0a02317 	ldw	r2,-32628(gp)
    2670:	10000005 	stb	zero,0(r2)
  }
  if (*minPtr == 60) {
    2674:	d0a02217 	ldw	r2,-32632(gp)
    2678:	10800003 	ldbu	r2,0(r2)
    267c:	10803fcc 	andi	r2,r2,255
    2680:	10800f18 	cmpnei	r2,r2,60
    2684:	1000061e 	bne	r2,zero,26a0 <countTime+0x68>
    *hourPtr += 1;
    2688:	d0e02117 	ldw	r3,-32636(gp)
    268c:	18800003 	ldbu	r2,0(r3)
    2690:	10800044 	addi	r2,r2,1
    2694:	18800005 	stb	r2,0(r3)
    *minPtr = 0;
    2698:	d0a02217 	ldw	r2,-32632(gp)
    269c:	10000005 	stb	zero,0(r2)
  }
  if (*hourPtr == 24) {
    26a0:	d0e02117 	ldw	r3,-32636(gp)
    26a4:	18800003 	ldbu	r2,0(r3)
    26a8:	10803fcc 	andi	r2,r2,255
    26ac:	10800618 	cmpnei	r2,r2,24
    26b0:	1000051e 	bne	r2,zero,26c8 <countTime+0x90>
    *hourPtr = 0;
    26b4:	18000005 	stb	zero,0(r3)
    *minPtr = 0;
    26b8:	d0a02217 	ldw	r2,-32632(gp)
    26bc:	10000005 	stb	zero,0(r2)
    *segPtr = 0;
    26c0:	d0a02317 	ldw	r2,-32628(gp)
    26c4:	10000005 	stb	zero,0(r2)
  }

  return;
  
}
    26c8:	f800283a 	ret

000026cc <numberToSeg7>:

}

void numberToSeg7(int num, volatile unsigned char* seg7) {
  
  switch (num) {
    26cc:	208002a8 	cmpgeui	r2,r4,10
    26d0:	1000111e 	bne	r2,zero,2718 <numberToSeg7+0x4c>
    26d4:	200890ba 	slli	r4,r4,2
    26d8:	00800034 	movhi	r2,0
    26dc:	2085883a 	add	r2,r4,r2
    26e0:	1089ba17 	ldw	r2,9960(r2)
    26e4:	1000683a 	jmp	r2
    26e8:	00002710 	cmplti	zero,zero,156
    26ec:	0000271c 	xori	zero,zero,156
    26f0:	00002724 	muli	zero,zero,156
    26f4:	0000272c 	andhi	zero,zero,156
    26f8:	00002734 	movhi	zero,156
    26fc:	0000273c 	xorhi	zero,zero,156
    2700:	00002744 	movi	zero,157
    2704:	0000274c 	andi	zero,zero,157
    2708:	00002754 	movui	zero,157
    270c:	0000275c 	xori	zero,zero,157
    case 0:
      *seg7 = 0b1000000;
    2710:	00801004 	movi	r2,64
    case 8: 
      *seg7 = 0b0000000;
      break;

    case 9:
      *seg7 = 0b0011000;
    2714:	28800005 	stb	r2,0(r5)
      break;
  }
  
  return;

}
    2718:	f800283a 	ret
      *seg7 = 0b1111001;
    271c:	00801e44 	movi	r2,121
    2720:	003ffc06 	br	2714 <numberToSeg7+0x48>
      *seg7 = 0b0100100;
    2724:	00800904 	movi	r2,36
    2728:	003ffa06 	br	2714 <numberToSeg7+0x48>
      *seg7 = 0b0110000;
    272c:	00800c04 	movi	r2,48
    2730:	003ff806 	br	2714 <numberToSeg7+0x48>
      *seg7 = 0b0011001;
    2734:	00800644 	movi	r2,25
    2738:	003ff606 	br	2714 <numberToSeg7+0x48>
      *seg7 = 0b0010010;
    273c:	00800484 	movi	r2,18
    2740:	003ff406 	br	2714 <numberToSeg7+0x48>
      *seg7 = 0b0000010;
    2744:	00800084 	movi	r2,2
    2748:	003ff206 	br	2714 <numberToSeg7+0x48>
      *seg7 = 0b1111000;
    274c:	00801e04 	movi	r2,120
    2750:	003ff006 	br	2714 <numberToSeg7+0x48>
      *seg7 = 0b0000000;
    2754:	28000005 	stb	zero,0(r5)
      break;
    2758:	f800283a 	ret
      *seg7 = 0b0011000;
    275c:	00800604 	movi	r2,24
    2760:	003fec06 	br	2714 <numberToSeg7+0x48>

00002764 <showTimeNumbers>:
  numberToSeg7(*segPtr % 10, segS0Ptr);
    2764:	d0a02317 	ldw	r2,-32628(gp)
void showTimeNumbers() {
    2768:	deffff04 	addi	sp,sp,-4
    276c:	dfc00015 	stw	ra,0(sp)
  numberToSeg7(*segPtr % 10, segS0Ptr);
    2770:	11000003 	ldbu	r4,0(r2)
    2774:	01400284 	movi	r5,10
    2778:	21003fcc 	andi	r4,r4,255
    277c:	0002db00 	call	2db0 <__umodsi3>
    2780:	d1600617 	ldw	r5,-32744(gp)
    2784:	11003fcc 	andi	r4,r2,255
    2788:	00026cc0 	call	26cc <numberToSeg7>
  numberToSeg7(*segPtr / 10, segS1Ptr);
    278c:	d0a02317 	ldw	r2,-32628(gp)
    2790:	01400284 	movi	r5,10
    2794:	11000003 	ldbu	r4,0(r2)
    2798:	21003fcc 	andi	r4,r4,255
    279c:	0002d4c0 	call	2d4c <__udivsi3>
    27a0:	d1600517 	ldw	r5,-32748(gp)
    27a4:	11003fcc 	andi	r4,r2,255
    27a8:	00026cc0 	call	26cc <numberToSeg7>
  numberToSeg7(*minPtr % 10, segM0Ptr);
    27ac:	d0a02217 	ldw	r2,-32632(gp)
    27b0:	01400284 	movi	r5,10
    27b4:	11000003 	ldbu	r4,0(r2)
    27b8:	21003fcc 	andi	r4,r4,255
    27bc:	0002db00 	call	2db0 <__umodsi3>
    27c0:	d1600417 	ldw	r5,-32752(gp)
    27c4:	11003fcc 	andi	r4,r2,255
    27c8:	00026cc0 	call	26cc <numberToSeg7>
  numberToSeg7(*minPtr / 10, segM1Ptr);
    27cc:	d0a02217 	ldw	r2,-32632(gp)
    27d0:	01400284 	movi	r5,10
    27d4:	11000003 	ldbu	r4,0(r2)
    27d8:	21003fcc 	andi	r4,r4,255
    27dc:	0002d4c0 	call	2d4c <__udivsi3>
    27e0:	d1600317 	ldw	r5,-32756(gp)
    27e4:	11003fcc 	andi	r4,r2,255
    27e8:	00026cc0 	call	26cc <numberToSeg7>
  numberToSeg7(*hourPtr % 10, segH0Ptr);
    27ec:	d0a02117 	ldw	r2,-32636(gp)
    27f0:	01400284 	movi	r5,10
    27f4:	11000003 	ldbu	r4,0(r2)
    27f8:	21003fcc 	andi	r4,r4,255
    27fc:	0002db00 	call	2db0 <__umodsi3>
    2800:	d1600217 	ldw	r5,-32760(gp)
    2804:	11003fcc 	andi	r4,r2,255
    2808:	00026cc0 	call	26cc <numberToSeg7>
  numberToSeg7(*hourPtr / 10, segH1Ptr);
    280c:	d0a02117 	ldw	r2,-32636(gp)
    2810:	01400284 	movi	r5,10
    2814:	11000003 	ldbu	r4,0(r2)
    2818:	21003fcc 	andi	r4,r4,255
    281c:	0002d4c0 	call	2d4c <__udivsi3>
    2820:	d1600117 	ldw	r5,-32764(gp)
    2824:	11003fcc 	andi	r4,r2,255
}
    2828:	dfc00017 	ldw	ra,0(sp)
    282c:	dec00104 	addi	sp,sp,4
  numberToSeg7(*hourPtr / 10, segH1Ptr);
    2830:	00026cc1 	jmpi	26cc <numberToSeg7>

00002834 <handleTimer>:
void handleTimer() {
    2834:	deffff04 	addi	sp,sp,-4
    2838:	dfc00015 	stw	ra,0(sp)
  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMERMODE, 0);
    283c:	00100035 	stwio	zero,16384(zero)
  if (*modePtr == 0) {
    2840:	d0a02417 	ldw	r2,-32624(gp)
    2844:	10800003 	ldbu	r2,0(r2)
    2848:	10803fcc 	andi	r2,r2,255
    284c:	1000031e 	bne	r2,zero,285c <handleTimer+0x28>
    countTime(); 
    2850:	00026380 	call	2638 <countTime>
    showTimeNumbers();
    2854:	00027640 	call	2764 <showTimeNumbers>
    handleAlarm();
    2858:	00025800 	call	2580 <handleAlarm>
  if (*modePtr == 2) {
    285c:	d0a02417 	ldw	r2,-32624(gp)
    2860:	10800003 	ldbu	r2,0(r2)
    2864:	10803fcc 	andi	r2,r2,255
    2868:	10800098 	cmpnei	r2,r2,2
    286c:	1000031e 	bne	r2,zero,287c <handleTimer+0x48>
}
    2870:	dfc00017 	ldw	ra,0(sp)
    2874:	dec00104 	addi	sp,sp,4
    countTime();
    2878:	00026381 	jmpi	2638 <countTime>
}
    287c:	dfc00017 	ldw	ra,0(sp)
    2880:	dec00104 	addi	sp,sp,4
    2884:	f800283a 	ret

00002888 <showAlarmNumbers>:
  numberToSeg7(*alarmSegPtr % 10, segS0Ptr);
    2888:	d0a01f17 	ldw	r2,-32644(gp)
void showAlarmNumbers() {
    288c:	deffff04 	addi	sp,sp,-4
    2890:	dfc00015 	stw	ra,0(sp)
  numberToSeg7(*alarmSegPtr % 10, segS0Ptr);
    2894:	11000003 	ldbu	r4,0(r2)
    2898:	01400284 	movi	r5,10
    289c:	21003fcc 	andi	r4,r4,255
    28a0:	0002db00 	call	2db0 <__umodsi3>
    28a4:	d1600617 	ldw	r5,-32744(gp)
    28a8:	11003fcc 	andi	r4,r2,255
    28ac:	00026cc0 	call	26cc <numberToSeg7>
  numberToSeg7(*alarmSegPtr / 10, segS1Ptr);
    28b0:	d0a01f17 	ldw	r2,-32644(gp)
    28b4:	01400284 	movi	r5,10
    28b8:	11000003 	ldbu	r4,0(r2)
    28bc:	21003fcc 	andi	r4,r4,255
    28c0:	0002d4c0 	call	2d4c <__udivsi3>
    28c4:	d1600517 	ldw	r5,-32748(gp)
    28c8:	11003fcc 	andi	r4,r2,255
    28cc:	00026cc0 	call	26cc <numberToSeg7>
  numberToSeg7(*alarmMinPtr % 10, segM0Ptr);
    28d0:	d0a01e17 	ldw	r2,-32648(gp)
    28d4:	01400284 	movi	r5,10
    28d8:	11000003 	ldbu	r4,0(r2)
    28dc:	21003fcc 	andi	r4,r4,255
    28e0:	0002db00 	call	2db0 <__umodsi3>
    28e4:	d1600417 	ldw	r5,-32752(gp)
    28e8:	11003fcc 	andi	r4,r2,255
    28ec:	00026cc0 	call	26cc <numberToSeg7>
  numberToSeg7(*alarmMinPtr / 10, segM1Ptr);
    28f0:	d0a01e17 	ldw	r2,-32648(gp)
    28f4:	01400284 	movi	r5,10
    28f8:	11000003 	ldbu	r4,0(r2)
    28fc:	21003fcc 	andi	r4,r4,255
    2900:	0002d4c0 	call	2d4c <__udivsi3>
    2904:	d1600317 	ldw	r5,-32756(gp)
    2908:	11003fcc 	andi	r4,r2,255
    290c:	00026cc0 	call	26cc <numberToSeg7>
  numberToSeg7(*alarmHourPtr % 10, segH0Ptr);
    2910:	d0a01d17 	ldw	r2,-32652(gp)
    2914:	01400284 	movi	r5,10
    2918:	11000003 	ldbu	r4,0(r2)
    291c:	21003fcc 	andi	r4,r4,255
    2920:	0002db00 	call	2db0 <__umodsi3>
    2924:	d1600217 	ldw	r5,-32760(gp)
    2928:	11003fcc 	andi	r4,r2,255
    292c:	00026cc0 	call	26cc <numberToSeg7>
  numberToSeg7(*alarmHourPtr / 10, segH1Ptr);
    2930:	d0a01d17 	ldw	r2,-32652(gp)
    2934:	01400284 	movi	r5,10
    2938:	11000003 	ldbu	r4,0(r2)
    293c:	21003fcc 	andi	r4,r4,255
    2940:	0002d4c0 	call	2d4c <__udivsi3>
    2944:	d1600117 	ldw	r5,-32764(gp)
    2948:	11003fcc 	andi	r4,r2,255
}
    294c:	dfc00017 	ldw	ra,0(sp)
    2950:	dec00104 	addi	sp,sp,4
  numberToSeg7(*alarmHourPtr / 10, segH1Ptr);
    2954:	00026cc1 	jmpi	26cc <numberToSeg7>

00002958 <changeMode>:
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTMODE, 0);
    2958:	00141b35 	stwio	zero,20588(zero)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BTMODE, 0xf);
    295c:	008003c4 	movi	r2,15
    2960:	00941a35 	stwio	r2,20584(zero)
  *modePtr += 1;
    2964:	d0e02417 	ldw	r3,-32624(gp)
    2968:	18800003 	ldbu	r2,0(r3)
    296c:	10800044 	addi	r2,r2,1
    2970:	18800005 	stb	r2,0(r3)
  switch (*modePtr) {      
    2974:	d0a02417 	ldw	r2,-32624(gp)
    2978:	10800003 	ldbu	r2,0(r2)
    297c:	10803fcc 	andi	r2,r2,255
    2980:	10c000a0 	cmpeqi	r3,r2,2
    2984:	1800081e 	bne	r3,zero,29a8 <changeMode+0x50>
    2988:	10c000e0 	cmpeqi	r3,r2,3
    298c:	18000a1e 	bne	r3,zero,29b8 <changeMode+0x60>
    2990:	10800058 	cmpnei	r2,r2,1
    2994:	10000e1e 	bne	r2,zero,29d0 <changeMode+0x78>
      *ledsPtr = 0b00100010;
    2998:	d0a00017 	ldw	r2,-32768(gp)
    299c:	00c00884 	movi	r3,34
    29a0:	10c00005 	stb	r3,0(r2)
      break;
    29a4:	f800283a 	ret
      *ledsPtr = 0b00100100;
    29a8:	d0a00017 	ldw	r2,-32768(gp)
    29ac:	00c00904 	movi	r3,36
    29b0:	10c00005 	stb	r3,0(r2)
      showAlarmNumbers();
    29b4:	00028881 	jmpi	2888 <showAlarmNumbers>
      *ledsPtr = 0b00000001;
    29b8:	d0a00017 	ldw	r2,-32768(gp)
    29bc:	00c00044 	movi	r3,1
    29c0:	10c00005 	stb	r3,0(r2)
      *modePtr = 0;
    29c4:	d0a02417 	ldw	r2,-32624(gp)
    29c8:	10000005 	stb	zero,0(r2)
      showTimeNumbers();
    29cc:	00027641 	jmpi	2764 <showTimeNumbers>
}
    29d0:	f800283a 	ret

000029d4 <changeTime>:
void changeTime() {
    29d4:	deffff04 	addi	sp,sp,-4
    29d8:	dfc00015 	stw	ra,0(sp)
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTINC, 0);
    29dc:	00142335 	stwio	zero,20620(zero)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BTINC, 0xf);
    29e0:	008003c4 	movi	r2,15
    29e4:	00942235 	stwio	r2,20616(zero)
  if (*modePtr == 1) {
    29e8:	d0a02417 	ldw	r2,-32624(gp)
    29ec:	10800003 	ldbu	r2,0(r2)
    29f0:	10803fcc 	andi	r2,r2,255
    29f4:	10800058 	cmpnei	r2,r2,1
    29f8:	10000f1e 	bne	r2,zero,2a38 <changeTime+0x64>
    switch (*configPtr) {      
    29fc:	d0a02017 	ldw	r2,-32640(gp)
    2a00:	10800003 	ldbu	r2,0(r2)
    2a04:	10803fcc 	andi	r2,r2,255
    2a08:	10c00060 	cmpeqi	r3,r2,1
    2a0c:	1800201e 	bne	r3,zero,2a90 <changeTime+0xbc>
    2a10:	10c000a0 	cmpeqi	r3,r2,2
    2a14:	1800201e 	bne	r3,zero,2a98 <changeTime+0xc4>
    2a18:	1000061e 	bne	r2,zero,2a34 <changeTime+0x60>
        if (*segPtr == 59) {
    2a1c:	d0e02317 	ldw	r3,-32628(gp)
        if (*minPtr == 59) {
    2a20:	18800003 	ldbu	r2,0(r3)
    2a24:	10803fcc 	andi	r2,r2,255
    2a28:	10800ed8 	cmpnei	r2,r2,59
        if (*hourPtr == 23) {
    2a2c:	10001f1e 	bne	r2,zero,2aac <changeTime+0xd8>
            *hourPtr = 0;
    2a30:	18000005 	stb	zero,0(r3)
    showTimeNumbers();
    2a34:	00027640 	call	2764 <showTimeNumbers>
  if (*modePtr == 2) {
    2a38:	d0a02417 	ldw	r2,-32624(gp)
    2a3c:	10800003 	ldbu	r2,0(r2)
    2a40:	10803fcc 	andi	r2,r2,255
    2a44:	10800098 	cmpnei	r2,r2,2
    2a48:	1000271e 	bne	r2,zero,2ae8 <changeTime+0x114>
    switch (*configPtr) {      
    2a4c:	d0a02017 	ldw	r2,-32640(gp)
    2a50:	10800003 	ldbu	r2,0(r2)
    2a54:	10803fcc 	andi	r2,r2,255
    2a58:	10c00060 	cmpeqi	r3,r2,1
    2a5c:	1800171e 	bne	r3,zero,2abc <changeTime+0xe8>
    2a60:	10c000a0 	cmpeqi	r3,r2,2
    2a64:	1800171e 	bne	r3,zero,2ac4 <changeTime+0xf0>
    2a68:	1000061e 	bne	r2,zero,2a84 <changeTime+0xb0>
        if (*alarmSegPtr == 59) {
    2a6c:	d0e01f17 	ldw	r3,-32644(gp)
        if (*alarmMinPtr == 59) {
    2a70:	18800003 	ldbu	r2,0(r3)
    2a74:	10803fcc 	andi	r2,r2,255
    2a78:	10800ed8 	cmpnei	r2,r2,59
        if (*alarmHourPtr == 23) {
    2a7c:	1000161e 	bne	r2,zero,2ad8 <changeTime+0x104>
            *alarmHourPtr = 0;
    2a80:	18000005 	stb	zero,0(r3)
}
    2a84:	dfc00017 	ldw	ra,0(sp)
    2a88:	dec00104 	addi	sp,sp,4
    showAlarmNumbers();
    2a8c:	00028881 	jmpi	2888 <showAlarmNumbers>
        if (*minPtr == 59) {
    2a90:	d0e02217 	ldw	r3,-32632(gp)
    2a94:	003fe206 	br	2a20 <changeTime+0x4c>
        if (*hourPtr == 23) {
    2a98:	d0e02117 	ldw	r3,-32636(gp)
    2a9c:	18800003 	ldbu	r2,0(r3)
    2aa0:	10803fcc 	andi	r2,r2,255
    2aa4:	108005d8 	cmpnei	r2,r2,23
    2aa8:	003fe006 	br	2a2c <changeTime+0x58>
            *hourPtr += 1;
    2aac:	18800003 	ldbu	r2,0(r3)
    2ab0:	10800044 	addi	r2,r2,1
    2ab4:	18800005 	stb	r2,0(r3)
    2ab8:	003fde06 	br	2a34 <changeTime+0x60>
        if (*alarmMinPtr == 59) {
    2abc:	d0e01e17 	ldw	r3,-32648(gp)
    2ac0:	003feb06 	br	2a70 <changeTime+0x9c>
        if (*alarmHourPtr == 23) {
    2ac4:	d0e01d17 	ldw	r3,-32652(gp)
    2ac8:	18800003 	ldbu	r2,0(r3)
    2acc:	10803fcc 	andi	r2,r2,255
    2ad0:	108005d8 	cmpnei	r2,r2,23
    2ad4:	003fe906 	br	2a7c <changeTime+0xa8>
            *alarmHourPtr += 1;
    2ad8:	18800003 	ldbu	r2,0(r3)
    2adc:	10800044 	addi	r2,r2,1
    2ae0:	18800005 	stb	r2,0(r3)
    2ae4:	003fe706 	br	2a84 <changeTime+0xb0>
}
    2ae8:	dfc00017 	ldw	ra,0(sp)
    2aec:	dec00104 	addi	sp,sp,4
    2af0:	f800283a 	ret

00002af4 <main>:
  modePtr = ramPtr + 1;
    2af4:	d0a00717 	ldw	r2,-32740(gp)
int main() { 
    2af8:	deffff04 	addi	sp,sp,-4
    2afc:	dfc00015 	stw	ra,0(sp)
  modePtr = ramPtr + 1;
    2b00:	10c00044 	addi	r3,r2,1
    2b04:	d0e02415 	stw	r3,-32624(gp)
  segPtr = ramPtr + 2;
    2b08:	10c00084 	addi	r3,r2,2
    2b0c:	d0e02315 	stw	r3,-32628(gp)
  minPtr = ramPtr + 3;
    2b10:	10c000c4 	addi	r3,r2,3
    2b14:	d0e02215 	stw	r3,-32632(gp)
  hourPtr = ramPtr + 4;
    2b18:	10c00104 	addi	r3,r2,4
    2b1c:	d0e02115 	stw	r3,-32636(gp)
  configPtr = ramPtr + 5;
    2b20:	10c00144 	addi	r3,r2,5
    2b24:	d0e02015 	stw	r3,-32640(gp)
  alarmSegPtr  = ramPtr + 6;
    2b28:	10c00184 	addi	r3,r2,6
    2b2c:	d0e01f15 	stw	r3,-32644(gp)
  alarmMinPtr = ramPtr + 7;
    2b30:	10c001c4 	addi	r3,r2,7
    2b34:	d0e01e15 	stw	r3,-32648(gp)
  alarmHourPtr = ramPtr + 8;
    2b38:	10c00204 	addi	r3,r2,8
    2b3c:	d0e01d15 	stw	r3,-32652(gp)
  blinkPtr = ramPtr + 9;
    2b40:	10c00244 	addi	r3,r2,9
    2b44:	d0e01c15 	stw	r3,-32656(gp)
  uartSeg0Ptr = ramPtr + 10;
    2b48:	10c00284 	addi	r3,r2,10
    2b4c:	d0e01b15 	stw	r3,-32660(gp)
  uartSeg1Ptr = ramPtr + 11;
    2b50:	10c002c4 	addi	r3,r2,11
    2b54:	d0e01a15 	stw	r3,-32664(gp)
  uartMin0Ptr = ramPtr + 12;
    2b58:	10c00304 	addi	r3,r2,12
    2b5c:	d0e01915 	stw	r3,-32668(gp)
  uartMin1Ptr = ramPtr + 13;
    2b60:	10c00344 	addi	r3,r2,13
    2b64:	d0e01815 	stw	r3,-32672(gp)
  uartHour0Ptr = ramPtr + 14;
    2b68:	10c00384 	addi	r3,r2,14
    2b6c:	d0e01715 	stw	r3,-32676(gp)
  uartHour1Ptr = ramPtr + 15;
    2b70:	10c003c4 	addi	r3,r2,15
    2b74:	d0e01615 	stw	r3,-32680(gp)
  uartCounterPtr = ramPtr + 16;
    2b78:	10c00404 	addi	r3,r2,16
  uartValuePtr = ramPtr + 17;
    2b7c:	10800444 	addi	r2,r2,17
    2b80:	d0a01415 	stw	r2,-32688(gp)
  *segS0Ptr = 0;
    2b84:	d0a00617 	ldw	r2,-32744(gp)
  uartCounterPtr = ramPtr + 16;
    2b88:	d0e01515 	stw	r3,-32684(gp)
  *alarmHourPtr = 12;
    2b8c:	00c00304 	movi	r3,12
  *segS0Ptr = 0;
    2b90:	10000005 	stb	zero,0(r2)
  *segS1Ptr = 0;
    2b94:	d0a00517 	ldw	r2,-32748(gp)
    2b98:	10000005 	stb	zero,0(r2)
  *segM0Ptr = 0;
    2b9c:	d0a00417 	ldw	r2,-32752(gp)
    2ba0:	10000005 	stb	zero,0(r2)
  *segM1Ptr = 0;
    2ba4:	d0a00317 	ldw	r2,-32756(gp)
    2ba8:	10000005 	stb	zero,0(r2)
  *segH0Ptr = 0;
    2bac:	d0a00217 	ldw	r2,-32760(gp)
    2bb0:	10000005 	stb	zero,0(r2)
  *segH1Ptr = 0;
    2bb4:	d0a00117 	ldw	r2,-32764(gp)
    2bb8:	10000005 	stb	zero,0(r2)
  *uartSeg0Ptr = 0;
    2bbc:	d0a01b17 	ldw	r2,-32660(gp)
    2bc0:	10000005 	stb	zero,0(r2)
  *uartSeg1Ptr = 0;
    2bc4:	d0a01a17 	ldw	r2,-32664(gp)
    2bc8:	10000005 	stb	zero,0(r2)
  *uartMin0Ptr = 0;
    2bcc:	d0a01917 	ldw	r2,-32668(gp)
    2bd0:	10000005 	stb	zero,0(r2)
  *uartMin1Ptr = 0;
    2bd4:	d0a01817 	ldw	r2,-32672(gp)
    2bd8:	10000005 	stb	zero,0(r2)
  *uartHour0Ptr = 0;
    2bdc:	d0a01717 	ldw	r2,-32676(gp)
    2be0:	10000005 	stb	zero,0(r2)
  *uartHour1Ptr = 0;
    2be4:	d0a01617 	ldw	r2,-32680(gp)
    2be8:	10000005 	stb	zero,0(r2)
  *uartCounterPtr = 0;
    2bec:	d0a01517 	ldw	r2,-32684(gp)
    2bf0:	10000005 	stb	zero,0(r2)
  *uartValuePtr = 0;
    2bf4:	d0a01417 	ldw	r2,-32688(gp)
    2bf8:	10000005 	stb	zero,0(r2)
  *modePtr = 0;
    2bfc:	d0a02417 	ldw	r2,-32624(gp)
    2c00:	10000005 	stb	zero,0(r2)
  *segPtr = 0;
    2c04:	d0a02317 	ldw	r2,-32628(gp)
    2c08:	10000005 	stb	zero,0(r2)
  *minPtr = 0;
    2c0c:	d0a02217 	ldw	r2,-32632(gp)
    2c10:	10000005 	stb	zero,0(r2)
  *hourPtr = 0;
    2c14:	d0a02117 	ldw	r2,-32636(gp)
    2c18:	10000005 	stb	zero,0(r2)
  *configPtr = 0;
    2c1c:	d0a02017 	ldw	r2,-32640(gp)
    2c20:	10000005 	stb	zero,0(r2)
  *alarmSegPtr = 0;
    2c24:	d0a01f17 	ldw	r2,-32644(gp)
    2c28:	10000005 	stb	zero,0(r2)
  *alarmMinPtr = 0;
    2c2c:	d0a01e17 	ldw	r2,-32648(gp)
    2c30:	10000005 	stb	zero,0(r2)
  *alarmHourPtr = 12;
    2c34:	d0a01d17 	ldw	r2,-32652(gp)
    2c38:	10c00005 	stb	r3,0(r2)
  *blinkPtr = 0;
    2c3c:	d0a01c17 	ldw	r2,-32656(gp)
  *ledsPtr = 0b00000001;
    2c40:	00c00044 	movi	r3,1
  *blinkPtr = 0;
    2c44:	10000005 	stb	zero,0(r2)
  *ledsPtr = 0b00000001;
    2c48:	d0a00017 	ldw	r2,-32768(gp)
    2c4c:	10c00005 	stb	r3,0(r2)
  initializeInterrupts();
    2c50:	00024a80 	call	24a8 <initializeInterrupts>
  while (1);
    2c54:	003fff06 	br	2c54 <main+0x160>

00002c58 <__divsi3>:
    2c58:	20001a16 	blt	r4,zero,2cc4 <__divsi3+0x6c>
    2c5c:	000f883a 	mov	r7,zero
    2c60:	2800020e 	bge	r5,zero,2c6c <__divsi3+0x14>
    2c64:	014bc83a 	sub	r5,zero,r5
    2c68:	39c0005c 	xori	r7,r7,1
    2c6c:	200d883a 	mov	r6,r4
    2c70:	00c00044 	movi	r3,1
    2c74:	2900092e 	bgeu	r5,r4,2c9c <__divsi3+0x44>
    2c78:	00800804 	movi	r2,32
    2c7c:	00c00044 	movi	r3,1
    2c80:	00000106 	br	2c88 <__divsi3+0x30>
    2c84:	10001226 	beq	r2,zero,2cd0 <__divsi3+0x78>
    2c88:	294b883a 	add	r5,r5,r5
    2c8c:	10bfffc4 	addi	r2,r2,-1
    2c90:	18c7883a 	add	r3,r3,r3
    2c94:	293ffb36 	bltu	r5,r4,2c84 <__divsi3+0x2c>
    2c98:	18000d26 	beq	r3,zero,2cd0 <__divsi3+0x78>
    2c9c:	0005883a 	mov	r2,zero
    2ca0:	31400236 	bltu	r6,r5,2cac <__divsi3+0x54>
    2ca4:	314dc83a 	sub	r6,r6,r5
    2ca8:	10c4b03a 	or	r2,r2,r3
    2cac:	1806d07a 	srli	r3,r3,1
    2cb0:	280ad07a 	srli	r5,r5,1
    2cb4:	183ffa1e 	bne	r3,zero,2ca0 <__divsi3+0x48>
    2cb8:	38000126 	beq	r7,zero,2cc0 <__divsi3+0x68>
    2cbc:	0085c83a 	sub	r2,zero,r2
    2cc0:	f800283a 	ret
    2cc4:	0109c83a 	sub	r4,zero,r4
    2cc8:	01c00044 	movi	r7,1
    2ccc:	003fe406 	br	2c60 <__divsi3+0x8>
    2cd0:	0005883a 	mov	r2,zero
    2cd4:	003ff806 	br	2cb8 <__divsi3+0x60>

00002cd8 <__modsi3>:
    2cd8:	20001916 	blt	r4,zero,2d40 <__modsi3+0x68>
    2cdc:	000f883a 	mov	r7,zero
    2ce0:	2005883a 	mov	r2,r4
    2ce4:	2800010e 	bge	r5,zero,2cec <__modsi3+0x14>
    2ce8:	014bc83a 	sub	r5,zero,r5
    2cec:	00c00044 	movi	r3,1
    2cf0:	2900092e 	bgeu	r5,r4,2d18 <__modsi3+0x40>
    2cf4:	01800804 	movi	r6,32
    2cf8:	00c00044 	movi	r3,1
    2cfc:	00000106 	br	2d04 <__modsi3+0x2c>
    2d00:	30000d26 	beq	r6,zero,2d38 <__modsi3+0x60>
    2d04:	294b883a 	add	r5,r5,r5
    2d08:	31bfffc4 	addi	r6,r6,-1
    2d0c:	18c7883a 	add	r3,r3,r3
    2d10:	293ffb36 	bltu	r5,r4,2d00 <__modsi3+0x28>
    2d14:	18000826 	beq	r3,zero,2d38 <__modsi3+0x60>
    2d18:	1806d07a 	srli	r3,r3,1
    2d1c:	11400136 	bltu	r2,r5,2d24 <__modsi3+0x4c>
    2d20:	1145c83a 	sub	r2,r2,r5
    2d24:	280ad07a 	srli	r5,r5,1
    2d28:	183ffb1e 	bne	r3,zero,2d18 <__modsi3+0x40>
    2d2c:	38000126 	beq	r7,zero,2d34 <__modsi3+0x5c>
    2d30:	0085c83a 	sub	r2,zero,r2
    2d34:	f800283a 	ret
    2d38:	2005883a 	mov	r2,r4
    2d3c:	003ffb06 	br	2d2c <__modsi3+0x54>
    2d40:	0109c83a 	sub	r4,zero,r4
    2d44:	01c00044 	movi	r7,1
    2d48:	003fe506 	br	2ce0 <__modsi3+0x8>

00002d4c <__udivsi3>:
    2d4c:	200d883a 	mov	r6,r4
    2d50:	2900152e 	bgeu	r5,r4,2da8 <__udivsi3+0x5c>
    2d54:	28001416 	blt	r5,zero,2da8 <__udivsi3+0x5c>
    2d58:	00800804 	movi	r2,32
    2d5c:	00c00044 	movi	r3,1
    2d60:	00000206 	br	2d6c <__udivsi3+0x20>
    2d64:	10000e26 	beq	r2,zero,2da0 <__udivsi3+0x54>
    2d68:	28000516 	blt	r5,zero,2d80 <__udivsi3+0x34>
    2d6c:	294b883a 	add	r5,r5,r5
    2d70:	10bfffc4 	addi	r2,r2,-1
    2d74:	18c7883a 	add	r3,r3,r3
    2d78:	293ffa36 	bltu	r5,r4,2d64 <__udivsi3+0x18>
    2d7c:	18000826 	beq	r3,zero,2da0 <__udivsi3+0x54>
    2d80:	0005883a 	mov	r2,zero
    2d84:	31400236 	bltu	r6,r5,2d90 <__udivsi3+0x44>
    2d88:	314dc83a 	sub	r6,r6,r5
    2d8c:	10c4b03a 	or	r2,r2,r3
    2d90:	1806d07a 	srli	r3,r3,1
    2d94:	280ad07a 	srli	r5,r5,1
    2d98:	183ffa1e 	bne	r3,zero,2d84 <__udivsi3+0x38>
    2d9c:	f800283a 	ret
    2da0:	0005883a 	mov	r2,zero
    2da4:	f800283a 	ret
    2da8:	00c00044 	movi	r3,1
    2dac:	003ff406 	br	2d80 <__udivsi3+0x34>

00002db0 <__umodsi3>:
    2db0:	2005883a 	mov	r2,r4
    2db4:	2900132e 	bgeu	r5,r4,2e04 <__umodsi3+0x54>
    2db8:	28001216 	blt	r5,zero,2e04 <__umodsi3+0x54>
    2dbc:	01800804 	movi	r6,32
    2dc0:	00c00044 	movi	r3,1
    2dc4:	00000206 	br	2dd0 <__umodsi3+0x20>
    2dc8:	30000c26 	beq	r6,zero,2dfc <__umodsi3+0x4c>
    2dcc:	28000516 	blt	r5,zero,2de4 <__umodsi3+0x34>
    2dd0:	294b883a 	add	r5,r5,r5
    2dd4:	31bfffc4 	addi	r6,r6,-1
    2dd8:	18c7883a 	add	r3,r3,r3
    2ddc:	293ffa36 	bltu	r5,r4,2dc8 <__umodsi3+0x18>
    2de0:	18000626 	beq	r3,zero,2dfc <__umodsi3+0x4c>
    2de4:	1806d07a 	srli	r3,r3,1
    2de8:	11400136 	bltu	r2,r5,2df0 <__umodsi3+0x40>
    2dec:	1145c83a 	sub	r2,r2,r5
    2df0:	280ad07a 	srli	r5,r5,1
    2df4:	183ffb1e 	bne	r3,zero,2de4 <__umodsi3+0x34>
    2df8:	f800283a 	ret
    2dfc:	2005883a 	mov	r2,r4
    2e00:	f800283a 	ret
    2e04:	00c00044 	movi	r3,1
    2e08:	003ff606 	br	2de4 <__umodsi3+0x34>

00002e0c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    2e0c:	0002e981 	jmpi	2e98 <alt_iic_isr_register>

00002e10 <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
    2e10:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2e14:	00bfff84 	movi	r2,-2
    2e18:	1884703a 	and	r2,r3,r2
    2e1c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    2e20:	00800044 	movi	r2,1
    2e24:	d1202817 	ldw	r4,-32608(gp)
    2e28:	114a983a 	sll	r5,r2,r5
    2e2c:	290ab03a 	or	r5,r5,r4
    2e30:	d1602815 	stw	r5,-32608(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2e34:	d0a02817 	ldw	r2,-32608(gp)
    2e38:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
    2e3c:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    2e40:	0005883a 	mov	r2,zero
    2e44:	f800283a 	ret

00002e48 <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
    2e48:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2e4c:	00bfff84 	movi	r2,-2
    2e50:	1884703a 	and	r2,r3,r2
    2e54:	1001703a 	wrctl	status,r2
  alt_irq_active &= ~(1 << id);
    2e58:	00bfff84 	movi	r2,-2
    2e5c:	d1202817 	ldw	r4,-32608(gp)
    2e60:	114a183a 	rol	r5,r2,r5
    2e64:	290a703a 	and	r5,r5,r4
    2e68:	d1602815 	stw	r5,-32608(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2e6c:	d0a02817 	ldw	r2,-32608(gp)
    2e70:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
    2e74:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    2e78:	0005883a 	mov	r2,zero
    2e7c:	f800283a 	ret

00002e80 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    2e80:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    2e84:	00800044 	movi	r2,1
    2e88:	1144983a 	sll	r2,r2,r5
    2e8c:	10c4703a 	and	r2,r2,r3
}
    2e90:	1004c03a 	cmpne	r2,r2,zero
    2e94:	f800283a 	ret

00002e98 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2e98:	28800808 	cmpgei	r2,r5,32
    2e9c:	1000161e 	bne	r2,zero,2ef8 <alt_iic_isr_register+0x60>
{
    2ea0:	defffe04 	addi	sp,sp,-8
    2ea4:	dfc00115 	stw	ra,4(sp)
    2ea8:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
    2eac:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2eb0:	00bfff84 	movi	r2,-2
    2eb4:	8084703a 	and	r2,r16,r2
    2eb8:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    2ebc:	280690fa 	slli	r3,r5,3
    2ec0:	00800034 	movhi	r2,0
    2ec4:	108c7004 	addi	r2,r2,12736
    2ec8:	10c5883a 	add	r2,r2,r3
    2ecc:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    2ed0:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    2ed4:	30000626 	beq	r6,zero,2ef0 <alt_iic_isr_register+0x58>
    2ed8:	0002e100 	call	2e10 <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
    2edc:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    2ee0:	dfc00117 	ldw	ra,4(sp)
    2ee4:	dc000017 	ldw	r16,0(sp)
    2ee8:	dec00204 	addi	sp,sp,8
    2eec:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    2ef0:	0002e480 	call	2e48 <alt_ic_irq_disable>
    2ef4:	003ff906 	br	2edc <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
    2ef8:	00bffa84 	movi	r2,-22
}
    2efc:	f800283a 	ret

00002f00 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2f00:	20800828 	cmpgeui	r2,r4,32
    2f04:	1000201e 	bne	r2,zero,2f88 <alt_irq_register+0x88>
  NIOS2_READ_STATUS (context);
    2f08:	000f303a 	rdctl	r7,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2f0c:	00ffff84 	movi	r3,-2
    2f10:	38c4703a 	and	r2,r7,r3
    2f14:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    2f18:	201090fa 	slli	r8,r4,3
    2f1c:	00800034 	movhi	r2,0
    2f20:	108c7004 	addi	r2,r2,12736
    2f24:	1205883a 	add	r2,r2,r8
    2f28:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    2f2c:	11400115 	stw	r5,4(r2)
  alt_irq_active |= (1 << id);
    2f30:	00800044 	movi	r2,1
    2f34:	1108983a 	sll	r4,r2,r4

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    2f38:	30000c26 	beq	r6,zero,2f6c <alt_irq_register+0x6c>
  NIOS2_READ_STATUS (context);
    2f3c:	0005303a 	rdctl	r2,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2f40:	10c6703a 	and	r3,r2,r3
    2f44:	1801703a 	wrctl	status,r3
    2f48:	d0e02817 	ldw	r3,-32608(gp)
    2f4c:	20c8b03a 	or	r4,r4,r3
  alt_irq_active &= ~(1 << id);
    2f50:	d1202815 	stw	r4,-32608(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2f54:	d0e02817 	ldw	r3,-32608(gp)
    2f58:	180170fa 	wrctl	ienable,r3
  NIOS2_WRITE_STATUS (context);
    2f5c:	1001703a 	wrctl	status,r2
    2f60:	3801703a 	wrctl	status,r7
    2f64:	0005883a 	mov	r2,zero
}
    2f68:	f800283a 	ret
  NIOS2_READ_STATUS (context);
    2f6c:	0005303a 	rdctl	r2,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2f70:	10c6703a 	and	r3,r2,r3
    2f74:	1801703a 	wrctl	status,r3
  alt_irq_active &= ~(1 << id);
    2f78:	d0e02817 	ldw	r3,-32608(gp)
    2f7c:	0108303a 	nor	r4,zero,r4
    2f80:	20c8703a 	and	r4,r4,r3
    2f84:	003ff206 	br	2f50 <alt_irq_register+0x50>
  int rc = -EINVAL;  
    2f88:	00bffa84 	movi	r2,-22

    alt_irq_enable_all(status);
  }
  return rc; 
}
    2f8c:	f800283a 	ret

00002f90 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2f90:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2f94:	01000034 	movhi	r4,0
    2f98:	01400034 	movhi	r5,0
    2f9c:	dfc00015 	stw	ra,0(sp)
    2fa0:	210c4304 	addi	r4,r4,12556
    2fa4:	294c4d04 	addi	r5,r5,12596
    2fa8:	21400426 	beq	r4,r5,2fbc <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
    2fac:	01800034 	movhi	r6,0
    2fb0:	318c4d04 	addi	r6,r6,12596
    2fb4:	310dc83a 	sub	r6,r6,r4
    2fb8:	00030e40 	call	30e4 <memcpy>
  if (to != from)
    2fbc:	01000034 	movhi	r4,0
    2fc0:	01400034 	movhi	r5,0
    2fc4:	21080804 	addi	r4,r4,8224
    2fc8:	29480804 	addi	r5,r5,8224
    2fcc:	21400426 	beq	r4,r5,2fe0 <alt_load+0x50>
      *to++ = *from++;
    2fd0:	01800034 	movhi	r6,0
    2fd4:	31886004 	addi	r6,r6,8576
    2fd8:	310dc83a 	sub	r6,r6,r4
    2fdc:	00030e40 	call	30e4 <memcpy>
  if (to != from)
    2fe0:	01000034 	movhi	r4,0
    2fe4:	01400034 	movhi	r5,0
    2fe8:	210c4304 	addi	r4,r4,12556
    2fec:	294c4304 	addi	r5,r5,12556
    2ff0:	21400426 	beq	r4,r5,3004 <alt_load+0x74>
      *to++ = *from++;
    2ff4:	01800034 	movhi	r6,0
    2ff8:	318c4304 	addi	r6,r6,12556
    2ffc:	310dc83a 	sub	r6,r6,r4
    3000:	00030e40 	call	30e4 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    3004:	00030640 	call	3064 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    3008:	dfc00017 	ldw	ra,0(sp)
    300c:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
    3010:	00030681 	jmpi	3068 <alt_icache_flush_all>

00003014 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    3014:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    3018:	0009883a 	mov	r4,zero
{
    301c:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
    3020:	00030400 	call	3040 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    3024:	00030600 	call	3060 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    3028:	d1a02917 	ldw	r6,-32604(gp)
    302c:	d1602a17 	ldw	r5,-32600(gp)
    3030:	d1202b17 	ldw	r4,-32596(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    3034:	dfc00017 	ldw	ra,0(sp)
    3038:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
    303c:	0002af41 	jmpi	2af4 <main>

00003040 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    3040:	deffff04 	addi	sp,sp,-4
    3044:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
    3048:	00030dc0 	call	30dc <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    304c:	00800044 	movi	r2,1
    3050:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    3054:	dfc00017 	ldw	ra,0(sp)
    3058:	dec00104 	addi	sp,sp,4
    305c:	f800283a 	ret

00003060 <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, TIMER);
    ALTERA_AVALON_UART_INIT ( UART, UART);
}
    3060:	f800283a 	ret

00003064 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    3064:	f800283a 	ret

00003068 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    3068:	f800283a 	ret

0000306c <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    306c:	213ffe84 	addi	r4,r4,-6
    3070:	20800428 	cmpgeui	r2,r4,16
    3074:	1000151e 	bne	r2,zero,30cc <alt_exception_cause_generated_bad_addr+0x60>
    3078:	200890ba 	slli	r4,r4,2
    307c:	00800034 	movhi	r2,0
    3080:	2085883a 	add	r2,r4,r2
    3084:	108c2317 	ldw	r2,12428(r2)
    3088:	1000683a 	jmp	r2
    308c:	000030d4 	movui	zero,195
    3090:	000030d4 	movui	zero,195
    3094:	000030cc 	andi	zero,zero,195
    3098:	000030cc 	andi	zero,zero,195
    309c:	000030cc 	andi	zero,zero,195
    30a0:	000030d4 	movui	zero,195
    30a4:	000030cc 	andi	zero,zero,195
    30a8:	000030cc 	andi	zero,zero,195
    30ac:	000030d4 	movui	zero,195
    30b0:	000030d4 	movui	zero,195
    30b4:	000030cc 	andi	zero,zero,195
    30b8:	000030d4 	movui	zero,195
    30bc:	000030cc 	andi	zero,zero,195
    30c0:	000030cc 	andi	zero,zero,195
    30c4:	000030cc 	andi	zero,zero,195
    30c8:	000030d4 	movui	zero,195
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    30cc:	0005883a 	mov	r2,zero
    30d0:	f800283a 	ret
    30d4:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    30d8:	f800283a 	ret

000030dc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    30dc:	000170fa 	wrctl	ienable,zero
}
    30e0:	f800283a 	ret

000030e4 <memcpy>:
    30e4:	2005883a 	mov	r2,r4
    30e8:	0007883a 	mov	r3,zero
    30ec:	30c0011e 	bne	r6,r3,30f4 <memcpy+0x10>
    30f0:	f800283a 	ret
    30f4:	28cf883a 	add	r7,r5,r3
    30f8:	39c00003 	ldbu	r7,0(r7)
    30fc:	10c9883a 	add	r4,r2,r3
    3100:	18c00044 	addi	r3,r3,1
    3104:	21c00005 	stb	r7,0(r4)
    3108:	003ff806 	br	30ec <memcpy+0x8>
