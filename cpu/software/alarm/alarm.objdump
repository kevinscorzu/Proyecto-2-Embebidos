
alarm.elf:     file format elf32-littlenios2
alarm.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002180

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x0000108c memsz 0x0000108c flags r-x
    LOAD off    0x000020ac vaddr 0x000030ac paddr 0x000030d4 align 2**12
         filesz 0x00000028 memsz 0x00000028 flags rw-
    LOAD off    0x000020fc vaddr 0x000030fc paddr 0x000030fc align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000f2c  00002180  00002180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  000030ac  000030fc  000020d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000028  000030ac  000030d4  000020ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  000030fc  000030fc  000020fc  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  0000325c  0000325c  000020d4  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  000020d4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000278  00000000  00000000  00002108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00001ff7  00000000  00000000  00002380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001011  00000000  00000000  00004377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00001944  00000000  00000000  00005388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000398  00000000  00000000  00006ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00000f96  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000e19  00000000  00000000  00007ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  00008e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000210  00000000  00000000  00008e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0000a48b  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000a48e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000a491  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000a492  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0000a493  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0000a497  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0000a49b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0000a49f  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000053  00000000  00000000  0000a4a5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .exceptions	00000000 .exceptions
00002180 l    d  .text	00000000 .text
000030ac l    d  .rodata	00000000 .rodata
000030ac l    d  .rwdata	00000000 .rwdata
000030fc l    d  .bss	00000000 .bss
0000325c l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/Users/leahy/Documents/TEC/II-SEM-2021/SistemasEmbebidos/Proyecto-2-Embebidos/cpu/software/alarm_bsp//obj/HAL/src/crt0.o
000021b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcpy.c
00003158 g     O .bss	00000004 alt_instruction_exception_handler
00002fb4 g     F .text	0000002c alt_main
00003104 g     O .bss	00000004 uartHour0Ptr
0000315c g     O .bss	00000100 alt_irq
000030d4 g       *ABS*	00000000 __flash_rwdata_start
000030d0 g     O .rwdata	00000004 UART
000030fc g     O .bss	00000004 uartCounterPtr
00003130 g     O .bss	00000004 minPtr
0000311c g     O .bss	00000004 alarmHourPtr
000021bc g     F .text	000000d8 configureTimeMode
00003124 g     O .bss	00000004 alarmSegPtr
0000307c g     F .text	00000008 altera_nios2_gen2_irq_init
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
00003140 g     O .bss	00000004 btIncEdgeCapture
00003150 g     O .bss	00000004 alt_argv
0000b0ac g       *ABS*	00000000 _gp
00003084 g     F .text	00000028 memcpy
000030c4 g     O .rwdata	00000004 segS0Ptr
0000300c g     F .text	00000070 alt_exception_cause_generated_bad_addr
00002cec g     F .text	00000064 .hidden __udivsi3
00003144 g     O .bss	00000004 btModeEdgeCapture
00003118 g     O .bss	00000004 blinkPtr
000025e8 g     F .text	00000094 countTime
00002ea0 g     F .text	00000090 alt_irq_register
0000325c g       *ABS*	00000000 __bss_end
00003138 g     O .bss	00000004 modePtr
00002e38 g     F .text	00000068 alt_iic_isr_register
00002e20 g     F .text	00000018 alt_ic_irq_enabled
00003148 g     O .bss	00000004 alt_irq_active
000020fc g     F .exceptions	00000060 alt_irq_handler
00002908 g     F .text	0000007c changeMode
00003004 g     F .text	00000004 alt_dcache_flush_all
000030d4 g       *ABS*	00000000 __ram_rwdata_end
000027e4 g     F .text	00000054 handleTimer
00002984 g     F .text	00000120 changeTime
000030ac g       *ABS*	00000000 __ram_rodata_end
00003134 g     O .bss	00000004 segPtr
00002d50 g     F .text	0000005c .hidden __umodsi3
0000325c g       *ABS*	00000000 end
00002838 g     F .text	000000d0 showAlarmNumbers
0000215c g     F .exceptions	00000024 alt_instruction_exception_entry
00003400 g       *ABS*	00000000 __alt_stack_pointer
000030bc g     O .rwdata	00000004 segM0Ptr
00002180 g     F .text	0000003c _start
00003000 g     F .text	00000004 alt_sys_init
00002714 g     F .text	000000d0 showTimeNumbers
00003108 g     O .bss	00000004 uartMin1Ptr
000030ac g       *ABS*	00000000 __ram_rwdata_start
000030ac g       *ABS*	00000000 __ram_rodata_start
00003100 g     O .bss	00000004 uartHour1Ptr
0000325c g       *ABS*	00000000 __alt_stack_base
00003110 g     O .bss	00000004 uartSeg1Ptr
0000312c g     O .bss	00000004 hourPtr
00002294 g     F .text	000001c4 handleUart
000030fc g       *ABS*	00000000 __bss_start
000030c0 g     O .rwdata	00000004 segS1Ptr
00002aa4 g     F .text	00000154 main
00002000 g       *ABS*	00000000 __alt_mem_RAM
0000314c g     O .bss	00000004 alt_envp
000030b4 g     O .rwdata	00000004 segH0Ptr
00002bf8 g     F .text	00000080 .hidden __divsi3
00003120 g     O .bss	00000004 alarmMinPtr
000030ac g       *ABS*	00000000 __flash_rodata_start
0000310c g     O .bss	00000004 uartMin0Ptr
00002fe0 g     F .text	00000020 alt_irq_init
000030c8 g     O .rwdata	00000004 ramPtr
00003154 g     O .bss	00000004 alt_argc
000030b0 g     O .rwdata	00000004 segH1Ptr
00002020 g       .exceptions	00000000 alt_irq_entry
00003128 g     O .bss	00000004 configPtr
00002020 g       *ABS*	00000000 __ram_exceptions_start
00002dac g     F .text	00000004 alt_ic_isr_register
000030d4 g       *ABS*	00000000 _edata
0000325c g       *ABS*	00000000 _end
00002180 g       *ABS*	00000000 __ram_exceptions_end
00002de8 g     F .text	00000038 alt_ic_irq_disable
00002c78 g     F .text	00000074 .hidden __modsi3
00003400 g       *ABS*	00000000 __alt_data_end
00002020 g     F .exceptions	00000000 alt_exception
00003114 g     O .bss	00000004 uartSeg0Ptr
00002458 g     F .text	000000d8 initializeInterrupts
0000200c g       .entry	00000000 _exit
0000267c g     F .text	00000098 numberToSeg7
00003008 g     F .text	00000004 alt_icache_flush_all
000030cc g     O .rwdata	00000004 alt_priority_mask
00002db0 g     F .text	00000038 alt_ic_irq_enable
000030ac g     O .rwdata	00000004 ledsPtr
00002530 g     F .text	000000b8 handleAlarm
000030b8 g     O .rwdata	00000004 segM1Ptr
00002f30 g     F .text	00000084 alt_load
0000313c g     O .bss	00000004 btSelEdgeCapture



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08486014 	ori	at,at,8576
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .exceptions:

00002020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    2020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    2024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    2028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    202c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    2030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    2034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    2038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    203c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    2040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    2044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    2048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    204c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    2050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    2054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    2058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    205c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    2060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    2064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    2068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    206c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    2070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    2074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    2078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    207c:	10000326 	beq	r2,zero,208c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    2080:	20000226 	beq	r4,zero,208c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    2084:	00020fc0 	call	20fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    2088:	00000706 	br	20a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    208c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    2090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    2094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    2098:	000215c0 	call	215c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    209c:	1000021e 	bne	r2,zero,20a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    20a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    20a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    20a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    20ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    20b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    20b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    20b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    20bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    20c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    20c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    20c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    20cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    20d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    20d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    20d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    20dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    20e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    20e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    20e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    20ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    20f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    20f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    20f8:	ef80083a 	eret

000020fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    20fc:	defffe04 	addi	sp,sp,-8
    2100:	dfc00115 	stw	ra,4(sp)
    2104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    2108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    210c:	04000034 	movhi	r16,0
    2110:	840c5704 	addi	r16,r16,12636
    i = 0;
    2114:	0005883a 	mov	r2,zero
    mask = 1;
    2118:	00c00044 	movi	r3,1
      if (active & mask)
    211c:	20ca703a 	and	r5,r4,r3
    2120:	28000b26 	beq	r5,zero,2150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
    2124:	100490fa 	slli	r2,r2,3
    2128:	8085883a 	add	r2,r16,r2
    212c:	10c00017 	ldw	r3,0(r2)
    2130:	11000117 	ldw	r4,4(r2)
    2134:	183ee83a 	callr	r3
    2138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    213c:	203ff51e 	bne	r4,zero,2114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    2140:	dfc00117 	ldw	ra,4(sp)
    2144:	dc000017 	ldw	r16,0(sp)
    2148:	dec00204 	addi	sp,sp,8
    214c:	f800283a 	ret
      mask <<= 1;
    2150:	1806907a 	slli	r3,r3,1
      i++;
    2154:	10800044 	addi	r2,r2,1
      if (active & mask)
    2158:	003ff006 	br	211c <alt_irq_handler+0x20>

0000215c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    215c:	d0a02b17 	ldw	r2,-32596(gp)
{
    2160:	200b883a 	mov	r5,r4
  if(alt_instruction_exception_handler) {
    2164:	10000326 	beq	r2,zero,2174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    2168:	000d883a 	mov	r6,zero
    216c:	013fffc4 	movi	r4,-1
    2170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    2174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    2178:	0005883a 	mov	r2,zero
    217c:	f800283a 	ret

Disassembly of section .text:

00002180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2184:	decd0014 	ori	sp,sp,13312
    movhi gp, %hi(_gp)
    2188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    218c:	d6ac2b14 	ori	gp,gp,45228
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2194:	108c3f14 	ori	r2,r2,12540

    movhi r3, %hi(__bss_end)
    2198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    219c:	18cc9714 	ori	r3,r3,12892

    beq r2, r3, 1f
    21a0:	10c00326 	beq	r2,r3,21b0 <_start+0x30>

0:
    stw zero, (r2)
    21a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    21a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    21ac:	10fffd36 	bltu	r2,r3,21a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    21b0:	0002f300 	call	2f30 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    21b4:	0002fb40 	call	2fb4 <alt_main>

000021b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    21b8:	003fff06 	br	21b8 <alt_after_alt_main>

000021bc <configureTimeMode>:

}

void configureTimeMode() {

  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTSEL, 0);
    21bc:	00141f35 	stwio	zero,20604(zero)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BTSEL, 0xf);
    21c0:	008003c4 	movi	r2,15
    21c4:	00941e35 	stwio	r2,20600(zero)

  if (*modePtr == 1 || *modePtr == 2) {
    21c8:	d0e02317 	ldw	r3,-32628(gp)
    21cc:	18800003 	ldbu	r2,0(r3)
    21d0:	10803fcc 	andi	r2,r2,255
    21d4:	10800060 	cmpeqi	r2,r2,1
    21d8:	1000041e 	bne	r2,zero,21ec <configureTimeMode+0x30>
    21dc:	18800003 	ldbu	r2,0(r3)
    21e0:	10803fcc 	andi	r2,r2,255
    21e4:	10800098 	cmpnei	r2,r2,2
    21e8:	1000291e 	bne	r2,zero,2290 <configureTimeMode+0xd4>
    *configPtr += 1;
    21ec:	d0e01f17 	ldw	r3,-32644(gp)
    21f0:	18800003 	ldbu	r2,0(r3)
    21f4:	10800044 	addi	r2,r2,1
    21f8:	18800005 	stb	r2,0(r3)

    switch (*configPtr) {      
    21fc:	d0a01f17 	ldw	r2,-32644(gp)
    2200:	10800003 	ldbu	r2,0(r2)
    2204:	10803fcc 	andi	r2,r2,255
    2208:	10c000a0 	cmpeqi	r3,r2,2
    220c:	18000d1e 	bne	r3,zero,2244 <configureTimeMode+0x88>
    2210:	10c000e0 	cmpeqi	r3,r2,3
    2214:	1800141e 	bne	r3,zero,2268 <configureTimeMode+0xac>
    2218:	10800058 	cmpnei	r2,r2,1
    221c:	10001c1e 	bne	r2,zero,2290 <configureTimeMode+0xd4>
      case 1: 
        *ledsPtr = 0b00000110 & *ledsPtr;
    2220:	d0e00017 	ldw	r3,-32768(gp)
    2224:	18800003 	ldbu	r2,0(r3)
    2228:	1080018c 	andi	r2,r2,6
    222c:	18800005 	stb	r2,0(r3)
        *ledsPtr = 0b01000000 | *ledsPtr;
    2230:	d0e00017 	ldw	r3,-32768(gp)
    2234:	18800003 	ldbu	r2,0(r3)
    2238:	10801014 	ori	r2,r2,64

        break;

      case 2:
        *ledsPtr = 0b00000110 & *ledsPtr;
        *ledsPtr = 0b10000000 | *ledsPtr;
    223c:	18800005 	stb	r2,0(r3)

        break;
    2240:	f800283a 	ret
        *ledsPtr = 0b00000110 & *ledsPtr;
    2244:	d0e00017 	ldw	r3,-32768(gp)
        *ledsPtr = 0b10000000 | *ledsPtr;
    2248:	013fe004 	movi	r4,-128
        *ledsPtr = 0b00000110 & *ledsPtr;
    224c:	18800003 	ldbu	r2,0(r3)
    2250:	1080018c 	andi	r2,r2,6
    2254:	18800005 	stb	r2,0(r3)
        *ledsPtr = 0b10000000 | *ledsPtr;
    2258:	d0e00017 	ldw	r3,-32768(gp)
    225c:	18800003 	ldbu	r2,0(r3)
    2260:	1104b03a 	or	r2,r2,r4
    2264:	003ff506 	br	223c <configureTimeMode+0x80>

      case 3:
        *ledsPtr = 0b00000110 & *ledsPtr;
    2268:	d0e00017 	ldw	r3,-32768(gp)
    226c:	18800003 	ldbu	r2,0(r3)
    2270:	1080018c 	andi	r2,r2,6
    2274:	18800005 	stb	r2,0(r3)
        *ledsPtr = 0b00100000 | *ledsPtr;
    2278:	d0e00017 	ldw	r3,-32768(gp)
    227c:	18800003 	ldbu	r2,0(r3)
    2280:	10800814 	ori	r2,r2,32
    2284:	18800005 	stb	r2,0(r3)
        *configPtr = 0;
    2288:	d0a01f17 	ldw	r2,-32644(gp)
    228c:	10000005 	stb	zero,0(r2)
    }
  }

  return;

}
    2290:	f800283a 	ret

00002294 <handleUart>:
  int type = IORD_ALTERA_AVALON_UART_STATUS(UART);
    2294:	00942a37 	ldwio	r2,20648(zero)
	if (type & ALTERA_AVALON_UART_STATUS_RRDY_MSK) {
    2298:	1080200c 	andi	r2,r2,128
    229c:	10004026 	beq	r2,zero,23a0 <handleUart+0x10c>
    value = IORD_ALTERA_AVALON_UART_RXDATA(UART);
    22a0:	00942837 	ldwio	r2,20640(zero)
    IOWR_ALTERA_AVALON_UART_STATUS(UART, 0);
    22a4:	00142a35 	stwio	zero,20648(zero)
    IOWR_ALTERA_AVALON_UART_TXDATA(UART, value); // Quitar linea mas adelante
    22a8:	10c03fcc 	andi	r3,r2,255
    22ac:	00d42935 	stwio	r3,20644(zero)
    switch (*uartCounterPtr) {      
    22b0:	d0e01417 	ldw	r3,-32688(gp)
    22b4:	18c00003 	ldbu	r3,0(r3)
    22b8:	18c03fcc 	andi	r3,r3,255
    22bc:	190001a8 	cmpgeui	r4,r3,6
    22c0:	20000d1e 	bne	r4,zero,22f8 <handleUart+0x64>
    22c4:	180690ba 	slli	r3,r3,2
    22c8:	01000034 	movhi	r4,0
    22cc:	1909883a 	add	r4,r3,r4
    22d0:	20c8b617 	ldw	r3,8920(r4)
    22d4:	1800683a 	jmp	r3
    22d8:	000022f0 	cmpltui	zero,zero,139
    22dc:	000023a4 	muli	zero,zero,142
    22e0:	000023ac 	andhi	zero,zero,142
    22e4:	000023b4 	movhi	zero,142
    22e8:	000023bc 	xorhi	zero,zero,142
    22ec:	000023c4 	movi	zero,143
          *uartHour1Ptr = value;
    22f0:	d0e01517 	ldw	r3,-32684(gp)
          *uartSeg0Ptr = value;
    22f4:	18800005 	stb	r2,0(r3)
    *uartCounterPtr += 1;
    22f8:	d1201417 	ldw	r4,-32688(gp)
    if (value == 'A') {
    22fc:	10803fcc 	andi	r2,r2,255
    *uartCounterPtr += 1;
    2300:	20c00003 	ldbu	r3,0(r4)
    2304:	18c00044 	addi	r3,r3,1
    2308:	20c00005 	stb	r3,0(r4)
    if (value == 'A') {
    230c:	10c01058 	cmpnei	r3,r2,65
    2310:	18002e1e 	bne	r3,zero,23cc <handleUart+0x138>
      *alarmHourPtr = ((*uartHour1Ptr - 48) * 10) + (*uartHour0Ptr - 48);
    2314:	d0a01517 	ldw	r2,-32684(gp)
    2318:	11000003 	ldbu	r4,0(r2)
    231c:	d0a01617 	ldw	r2,-32680(gp)
    2320:	10c00003 	ldbu	r3,0(r2)
    2324:	200490ba 	slli	r2,r4,2
    2328:	18fffc04 	addi	r3,r3,-16
    232c:	1105883a 	add	r2,r2,r4
    2330:	1004907a 	slli	r2,r2,1
    2334:	10c5883a 	add	r2,r2,r3
    2338:	d0e01c17 	ldw	r3,-32656(gp)
    233c:	18800005 	stb	r2,0(r3)
      *alarmMinPtr = ((*uartMin1Ptr - 48) * 10) + (*uartMin0Ptr - 48);
    2340:	d0a01717 	ldw	r2,-32676(gp)
    2344:	11000003 	ldbu	r4,0(r2)
    2348:	d0a01817 	ldw	r2,-32672(gp)
    234c:	10c00003 	ldbu	r3,0(r2)
    2350:	200490ba 	slli	r2,r4,2
    2354:	18fffc04 	addi	r3,r3,-16
    2358:	1105883a 	add	r2,r2,r4
    235c:	1004907a 	slli	r2,r2,1
    2360:	10c5883a 	add	r2,r2,r3
    2364:	d0e01d17 	ldw	r3,-32652(gp)
    2368:	18800005 	stb	r2,0(r3)
      *alarmSegPtr = ((*uartSeg1Ptr - 48) * 10) + (*uartSeg0Ptr - 48);
    236c:	d0a01917 	ldw	r2,-32668(gp)
    2370:	11000003 	ldbu	r4,0(r2)
    2374:	d0a01a17 	ldw	r2,-32664(gp)
    2378:	200690ba 	slli	r3,r4,2
    237c:	10800003 	ldbu	r2,0(r2)
    2380:	1907883a 	add	r3,r3,r4
    2384:	1806907a 	slli	r3,r3,1
    2388:	10bffc04 	addi	r2,r2,-16
    238c:	10c5883a 	add	r2,r2,r3
    2390:	d0e01e17 	ldw	r3,-32648(gp)
      *segPtr = ((*uartSeg1Ptr - 48) * 10) + (*uartSeg0Ptr - 48);
    2394:	18800005 	stb	r2,0(r3)
      *uartCounterPtr = 0;
    2398:	d0a01417 	ldw	r2,-32688(gp)
    239c:	10000005 	stb	zero,0(r2)
}
    23a0:	f800283a 	ret
          *uartHour0Ptr = value;
    23a4:	d0e01617 	ldw	r3,-32680(gp)
    23a8:	003fd206 	br	22f4 <handleUart+0x60>
          *uartMin1Ptr = value;
    23ac:	d0e01717 	ldw	r3,-32676(gp)
    23b0:	003fd006 	br	22f4 <handleUart+0x60>
          *uartMin0Ptr = value;
    23b4:	d0e01817 	ldw	r3,-32672(gp)
    23b8:	003fce06 	br	22f4 <handleUart+0x60>
          *uartSeg1Ptr = value;
    23bc:	d0e01917 	ldw	r3,-32668(gp)
    23c0:	003fcc06 	br	22f4 <handleUart+0x60>
          *uartSeg0Ptr = value;
    23c4:	d0e01a17 	ldw	r3,-32664(gp)
    23c8:	003fca06 	br	22f4 <handleUart+0x60>
    if (value == 'C') {
    23cc:	108010d8 	cmpnei	r2,r2,67
    23d0:	103ff31e 	bne	r2,zero,23a0 <handleUart+0x10c>
      *hourPtr = ((*uartHour1Ptr - 48) * 10) + (*uartHour0Ptr - 48);
    23d4:	d0a01517 	ldw	r2,-32684(gp)
    23d8:	11000003 	ldbu	r4,0(r2)
    23dc:	d0a01617 	ldw	r2,-32680(gp)
    23e0:	10c00003 	ldbu	r3,0(r2)
    23e4:	200490ba 	slli	r2,r4,2
    23e8:	18fffc04 	addi	r3,r3,-16
    23ec:	1105883a 	add	r2,r2,r4
    23f0:	1004907a 	slli	r2,r2,1
    23f4:	10c5883a 	add	r2,r2,r3
    23f8:	d0e02017 	ldw	r3,-32640(gp)
    23fc:	18800005 	stb	r2,0(r3)
      *minPtr = ((*uartMin1Ptr - 48) * 10) + (*uartMin0Ptr - 48);
    2400:	d0a01717 	ldw	r2,-32676(gp)
    2404:	11000003 	ldbu	r4,0(r2)
    2408:	d0a01817 	ldw	r2,-32672(gp)
    240c:	10c00003 	ldbu	r3,0(r2)
    2410:	200490ba 	slli	r2,r4,2
    2414:	18fffc04 	addi	r3,r3,-16
    2418:	1105883a 	add	r2,r2,r4
    241c:	1004907a 	slli	r2,r2,1
    2420:	10c5883a 	add	r2,r2,r3
    2424:	d0e02117 	ldw	r3,-32636(gp)
    2428:	18800005 	stb	r2,0(r3)
      *segPtr = ((*uartSeg1Ptr - 48) * 10) + (*uartSeg0Ptr - 48);
    242c:	d0a01917 	ldw	r2,-32668(gp)
    2430:	11000003 	ldbu	r4,0(r2)
    2434:	d0a01a17 	ldw	r2,-32664(gp)
    2438:	10c00003 	ldbu	r3,0(r2)
    243c:	200490ba 	slli	r2,r4,2
    2440:	18fffc04 	addi	r3,r3,-16
    2444:	1105883a 	add	r2,r2,r4
    2448:	1004907a 	slli	r2,r2,1
    244c:	10c5883a 	add	r2,r2,r3
    2450:	d0e02217 	ldw	r3,-32632(gp)
    2454:	003fcf06 	br	2394 <handleUart+0x100>

00002458 <initializeInterrupts>:
void initializeInterrupts() {
    2458:	defffe04 	addi	sp,sp,-8
    245c:	dfc00115 	stw	ra,4(sp)
  IOWR_ALTERA_AVALON_UART_DIVISOR(UART, (ALTCPUFREQ / UARTBAUD) + 1);
    2460:	00806cc4 	movi	r2,435
    2464:	00942c35 	stwio	r2,20656(zero)
	IOWR_ALTERA_AVALON_UART_CONTROL(UART, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
    2468:	00802004 	movi	r2,128
    246c:	00942b35 	stwio	r2,20652(zero)
  alt_ic_isr_register(UARTIRQID, UARTIRQ, handleUart, 0, 0);
    2470:	01800034 	movhi	r6,0
    2474:	000f883a 	mov	r7,zero
    2478:	3188a504 	addi	r6,r6,8852
    247c:	d8000015 	stw	zero,0(sp)
    2480:	000b883a 	mov	r5,zero
    2484:	0009883a 	mov	r4,zero
    2488:	0002dac0 	call	2dac <alt_ic_isr_register>
	alt_ic_irq_enable(UARTIRQID, UARTIRQ);
    248c:	000b883a 	mov	r5,zero
    2490:	0009883a 	mov	r4,zero
    2494:	0002db00 	call	2db0 <alt_ic_irq_enable>
	alt_irq_register(TIMERIRQ, 0, handleTimer);
    2498:	01800034 	movhi	r6,0
    249c:	3189f904 	addi	r6,r6,10212
    24a0:	000b883a 	mov	r5,zero
    24a4:	01000044 	movi	r4,1
    24a8:	0002ea00 	call	2ea0 <alt_irq_register>
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMERMODE,
    24ac:	008001c4 	movi	r2,7
    24b0:	00900135 	stwio	r2,16388(zero)
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BTMODE, 0xf);
    24b4:	008003c4 	movi	r2,15
    24b8:	00941a35 	stwio	r2,20584(zero)
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BTINC, 0xf);
    24bc:	00942235 	stwio	r2,20616(zero)
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BTSEL, 0xf);
    24c0:	00941e35 	stwio	r2,20600(zero)
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTMODE, 0x0);
    24c4:	00141b35 	stwio	zero,20588(zero)
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTINC, 0x0);
    24c8:	00142335 	stwio	zero,20620(zero)
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTSEL, 0x0);
    24cc:	00141f35 	stwio	zero,20604(zero)
  alt_ic_isr_register(BTMODEIRQID,
    24d0:	01800034 	movhi	r6,0
    24d4:	d8000015 	stw	zero,0(sp)
    24d8:	d1e02604 	addi	r7,gp,-32616
    24dc:	318a4204 	addi	r6,r6,10504
    24e0:	01400084 	movi	r5,2
    24e4:	0009883a 	mov	r4,zero
    24e8:	0002dac0 	call	2dac <alt_ic_isr_register>
  alt_ic_isr_register(BTINCIRQID,
    24ec:	01800034 	movhi	r6,0
    24f0:	d8000015 	stw	zero,0(sp)
    24f4:	d1e02504 	addi	r7,gp,-32620
    24f8:	318a6104 	addi	r6,r6,10628
    24fc:	01400104 	movi	r5,4
    2500:	0009883a 	mov	r4,zero
    2504:	0002dac0 	call	2dac <alt_ic_isr_register>
  alt_ic_isr_register(BTSELIRQID,
    2508:	01800034 	movhi	r6,0
    250c:	d8000015 	stw	zero,0(sp)
    2510:	d1e02404 	addi	r7,gp,-32624
    2514:	31886f04 	addi	r6,r6,8636
    2518:	014000c4 	movi	r5,3
    251c:	0009883a 	mov	r4,zero
    2520:	0002dac0 	call	2dac <alt_ic_isr_register>
}
    2524:	dfc00117 	ldw	ra,4(sp)
    2528:	dec00204 	addi	sp,sp,8
    252c:	f800283a 	ret

00002530 <handleAlarm>:
  if (*segPtr == *alarmSegPtr && *minPtr == *alarmMinPtr && *hourPtr == *alarmHourPtr) {
    2530:	d0a02217 	ldw	r2,-32632(gp)
    2534:	11000003 	ldbu	r4,0(r2)
    2538:	d0a01e17 	ldw	r2,-32648(gp)
    253c:	21003fcc 	andi	r4,r4,255
    2540:	10c00003 	ldbu	r3,0(r2)
    *blinkPtr = 10;
    2544:	d0a01b17 	ldw	r2,-32660(gp)
  if (*segPtr == *alarmSegPtr && *minPtr == *alarmMinPtr && *hourPtr == *alarmHourPtr) {
    2548:	18c03fcc 	andi	r3,r3,255
    254c:	20c0141e 	bne	r4,r3,25a0 <handleAlarm+0x70>
    2550:	d0e02117 	ldw	r3,-32636(gp)
    2554:	19000003 	ldbu	r4,0(r3)
    2558:	d0e01d17 	ldw	r3,-32652(gp)
    255c:	21003fcc 	andi	r4,r4,255
    2560:	18c00003 	ldbu	r3,0(r3)
    2564:	18c03fcc 	andi	r3,r3,255
    2568:	20c00d1e 	bne	r4,r3,25a0 <handleAlarm+0x70>
    256c:	d0e02017 	ldw	r3,-32640(gp)
    2570:	19000003 	ldbu	r4,0(r3)
    2574:	d0e01c17 	ldw	r3,-32656(gp)
    2578:	21003fcc 	andi	r4,r4,255
    257c:	18c00003 	ldbu	r3,0(r3)
    2580:	18c03fcc 	andi	r3,r3,255
    2584:	20c0061e 	bne	r4,r3,25a0 <handleAlarm+0x70>
    *blinkPtr = 10;
    2588:	00c00284 	movi	r3,10
    258c:	10c00005 	stb	r3,0(r2)
    *ledsPtr = 0b11111111;
    2590:	d0a00017 	ldw	r2,-32768(gp)
    2594:	00ffffc4 	movi	r3,-1
    *ledsPtr = 0b00000001;
    2598:	10c00005 	stb	r3,0(r2)
}
    259c:	f800283a 	ret
  else if (*blinkPtr != 0) {
    25a0:	10c00003 	ldbu	r3,0(r2)
    25a4:	18c03fcc 	andi	r3,r3,255
    25a8:	18000926 	beq	r3,zero,25d0 <handleAlarm+0xa0>
    *ledsPtr = ~*ledsPtr;
    25ac:	d0e00017 	ldw	r3,-32768(gp)
    25b0:	18800003 	ldbu	r2,0(r3)
    25b4:	0084303a 	nor	r2,zero,r2
    25b8:	18800005 	stb	r2,0(r3)
    *blinkPtr -= 1;
    25bc:	d0e01b17 	ldw	r3,-32660(gp)
    25c0:	18800003 	ldbu	r2,0(r3)
    25c4:	10bfffc4 	addi	r2,r2,-1
    25c8:	18800005 	stb	r2,0(r3)
    25cc:	f800283a 	ret
  else if (*blinkPtr <= 0) {
    25d0:	10800003 	ldbu	r2,0(r2)
    25d4:	10803fcc 	andi	r2,r2,255
    25d8:	103ff01e 	bne	r2,zero,259c <handleAlarm+0x6c>
    *ledsPtr = 0b00000001;
    25dc:	d0a00017 	ldw	r2,-32768(gp)
    25e0:	00c00044 	movi	r3,1
    25e4:	003fec06 	br	2598 <handleAlarm+0x68>

000025e8 <countTime>:

}

void countTime() {
  
  *segPtr += 1;
    25e8:	d0e02217 	ldw	r3,-32632(gp)
    25ec:	18800003 	ldbu	r2,0(r3)
    25f0:	10800044 	addi	r2,r2,1
    25f4:	18800005 	stb	r2,0(r3)
  
  if (*segPtr == 60) {
    25f8:	d0a02217 	ldw	r2,-32632(gp)
    25fc:	10800003 	ldbu	r2,0(r2)
    2600:	10803fcc 	andi	r2,r2,255
    2604:	10800f18 	cmpnei	r2,r2,60
    2608:	1000061e 	bne	r2,zero,2624 <countTime+0x3c>
    *minPtr += 1;
    260c:	d0e02117 	ldw	r3,-32636(gp)
    2610:	18800003 	ldbu	r2,0(r3)
    2614:	10800044 	addi	r2,r2,1
    2618:	18800005 	stb	r2,0(r3)
    *segPtr = 0;
    261c:	d0a02217 	ldw	r2,-32632(gp)
    2620:	10000005 	stb	zero,0(r2)
  }
  if (*minPtr == 60) {
    2624:	d0a02117 	ldw	r2,-32636(gp)
    2628:	10800003 	ldbu	r2,0(r2)
    262c:	10803fcc 	andi	r2,r2,255
    2630:	10800f18 	cmpnei	r2,r2,60
    2634:	1000061e 	bne	r2,zero,2650 <countTime+0x68>
    *hourPtr += 1;
    2638:	d0e02017 	ldw	r3,-32640(gp)
    263c:	18800003 	ldbu	r2,0(r3)
    2640:	10800044 	addi	r2,r2,1
    2644:	18800005 	stb	r2,0(r3)
    *minPtr = 0;
    2648:	d0a02117 	ldw	r2,-32636(gp)
    264c:	10000005 	stb	zero,0(r2)
  }
  if (*hourPtr == 24) {
    2650:	d0e02017 	ldw	r3,-32640(gp)
    2654:	18800003 	ldbu	r2,0(r3)
    2658:	10803fcc 	andi	r2,r2,255
    265c:	10800618 	cmpnei	r2,r2,24
    2660:	1000051e 	bne	r2,zero,2678 <countTime+0x90>
    *hourPtr = 0;
    2664:	18000005 	stb	zero,0(r3)
    *minPtr = 0;
    2668:	d0a02117 	ldw	r2,-32636(gp)
    266c:	10000005 	stb	zero,0(r2)
    *segPtr = 0;
    2670:	d0a02217 	ldw	r2,-32632(gp)
    2674:	10000005 	stb	zero,0(r2)
  }

  return;
  
}
    2678:	f800283a 	ret

0000267c <numberToSeg7>:

}

void numberToSeg7(int num, volatile unsigned char* seg7) {
  
  switch (num) {
    267c:	208002a8 	cmpgeui	r2,r4,10
    2680:	1000111e 	bne	r2,zero,26c8 <numberToSeg7+0x4c>
    2684:	200890ba 	slli	r4,r4,2
    2688:	00800034 	movhi	r2,0
    268c:	2085883a 	add	r2,r4,r2
    2690:	1089a617 	ldw	r2,9880(r2)
    2694:	1000683a 	jmp	r2
    2698:	000026c0 	call	26c <__alt_mem_RAM-0x1d94>
    269c:	000026cc 	andi	zero,zero,155
    26a0:	000026d4 	movui	zero,155
    26a4:	000026dc 	xori	zero,zero,155
    26a8:	000026e4 	muli	zero,zero,155
    26ac:	000026ec 	andhi	zero,zero,155
    26b0:	000026f4 	movhi	zero,155
    26b4:	000026fc 	xorhi	zero,zero,155
    26b8:	00002704 	movi	zero,156
    26bc:	0000270c 	andi	zero,zero,156
    case 0:
      *seg7 = 0b1000000;
    26c0:	00801004 	movi	r2,64
    case 8: 
      *seg7 = 0b0000000;
      break;

    case 9:
      *seg7 = 0b0011000;
    26c4:	28800005 	stb	r2,0(r5)
      break;
  }
  
  return;

}
    26c8:	f800283a 	ret
      *seg7 = 0b1111001;
    26cc:	00801e44 	movi	r2,121
    26d0:	003ffc06 	br	26c4 <numberToSeg7+0x48>
      *seg7 = 0b0100100;
    26d4:	00800904 	movi	r2,36
    26d8:	003ffa06 	br	26c4 <numberToSeg7+0x48>
      *seg7 = 0b0110000;
    26dc:	00800c04 	movi	r2,48
    26e0:	003ff806 	br	26c4 <numberToSeg7+0x48>
      *seg7 = 0b0011001;
    26e4:	00800644 	movi	r2,25
    26e8:	003ff606 	br	26c4 <numberToSeg7+0x48>
      *seg7 = 0b0010010;
    26ec:	00800484 	movi	r2,18
    26f0:	003ff406 	br	26c4 <numberToSeg7+0x48>
      *seg7 = 0b0000010;
    26f4:	00800084 	movi	r2,2
    26f8:	003ff206 	br	26c4 <numberToSeg7+0x48>
      *seg7 = 0b1111000;
    26fc:	00801e04 	movi	r2,120
    2700:	003ff006 	br	26c4 <numberToSeg7+0x48>
      *seg7 = 0b0000000;
    2704:	28000005 	stb	zero,0(r5)
      break;
    2708:	f800283a 	ret
      *seg7 = 0b0011000;
    270c:	00800604 	movi	r2,24
    2710:	003fec06 	br	26c4 <numberToSeg7+0x48>

00002714 <showTimeNumbers>:
  numberToSeg7(*segPtr % 10, segS0Ptr);
    2714:	d0a02217 	ldw	r2,-32632(gp)
void showTimeNumbers() {
    2718:	deffff04 	addi	sp,sp,-4
    271c:	dfc00015 	stw	ra,0(sp)
  numberToSeg7(*segPtr % 10, segS0Ptr);
    2720:	11000003 	ldbu	r4,0(r2)
    2724:	01400284 	movi	r5,10
    2728:	21003fcc 	andi	r4,r4,255
    272c:	0002d500 	call	2d50 <__umodsi3>
    2730:	d1600617 	ldw	r5,-32744(gp)
    2734:	11003fcc 	andi	r4,r2,255
    2738:	000267c0 	call	267c <numberToSeg7>
  numberToSeg7(*segPtr / 10, segS1Ptr);
    273c:	d0a02217 	ldw	r2,-32632(gp)
    2740:	01400284 	movi	r5,10
    2744:	11000003 	ldbu	r4,0(r2)
    2748:	21003fcc 	andi	r4,r4,255
    274c:	0002cec0 	call	2cec <__udivsi3>
    2750:	d1600517 	ldw	r5,-32748(gp)
    2754:	11003fcc 	andi	r4,r2,255
    2758:	000267c0 	call	267c <numberToSeg7>
  numberToSeg7(*minPtr % 10, segM0Ptr);
    275c:	d0a02117 	ldw	r2,-32636(gp)
    2760:	01400284 	movi	r5,10
    2764:	11000003 	ldbu	r4,0(r2)
    2768:	21003fcc 	andi	r4,r4,255
    276c:	0002d500 	call	2d50 <__umodsi3>
    2770:	d1600417 	ldw	r5,-32752(gp)
    2774:	11003fcc 	andi	r4,r2,255
    2778:	000267c0 	call	267c <numberToSeg7>
  numberToSeg7(*minPtr / 10, segM1Ptr);
    277c:	d0a02117 	ldw	r2,-32636(gp)
    2780:	01400284 	movi	r5,10
    2784:	11000003 	ldbu	r4,0(r2)
    2788:	21003fcc 	andi	r4,r4,255
    278c:	0002cec0 	call	2cec <__udivsi3>
    2790:	d1600317 	ldw	r5,-32756(gp)
    2794:	11003fcc 	andi	r4,r2,255
    2798:	000267c0 	call	267c <numberToSeg7>
  numberToSeg7(*hourPtr % 10, segH0Ptr);
    279c:	d0a02017 	ldw	r2,-32640(gp)
    27a0:	01400284 	movi	r5,10
    27a4:	11000003 	ldbu	r4,0(r2)
    27a8:	21003fcc 	andi	r4,r4,255
    27ac:	0002d500 	call	2d50 <__umodsi3>
    27b0:	d1600217 	ldw	r5,-32760(gp)
    27b4:	11003fcc 	andi	r4,r2,255
    27b8:	000267c0 	call	267c <numberToSeg7>
  numberToSeg7(*hourPtr / 10, segH1Ptr);
    27bc:	d0a02017 	ldw	r2,-32640(gp)
    27c0:	01400284 	movi	r5,10
    27c4:	11000003 	ldbu	r4,0(r2)
    27c8:	21003fcc 	andi	r4,r4,255
    27cc:	0002cec0 	call	2cec <__udivsi3>
    27d0:	d1600117 	ldw	r5,-32764(gp)
    27d4:	11003fcc 	andi	r4,r2,255
}
    27d8:	dfc00017 	ldw	ra,0(sp)
    27dc:	dec00104 	addi	sp,sp,4
  numberToSeg7(*hourPtr / 10, segH1Ptr);
    27e0:	000267c1 	jmpi	267c <numberToSeg7>

000027e4 <handleTimer>:
void handleTimer() {
    27e4:	deffff04 	addi	sp,sp,-4
    27e8:	dfc00015 	stw	ra,0(sp)
  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMERMODE, 0);
    27ec:	00100035 	stwio	zero,16384(zero)
  if (*modePtr == 0) {
    27f0:	d0a02317 	ldw	r2,-32628(gp)
    27f4:	10800003 	ldbu	r2,0(r2)
    27f8:	10803fcc 	andi	r2,r2,255
    27fc:	1000031e 	bne	r2,zero,280c <handleTimer+0x28>
    countTime(); 
    2800:	00025e80 	call	25e8 <countTime>
    showTimeNumbers();
    2804:	00027140 	call	2714 <showTimeNumbers>
    handleAlarm();
    2808:	00025300 	call	2530 <handleAlarm>
  if (*modePtr == 2) {
    280c:	d0a02317 	ldw	r2,-32628(gp)
    2810:	10800003 	ldbu	r2,0(r2)
    2814:	10803fcc 	andi	r2,r2,255
    2818:	10800098 	cmpnei	r2,r2,2
    281c:	1000031e 	bne	r2,zero,282c <handleTimer+0x48>
}
    2820:	dfc00017 	ldw	ra,0(sp)
    2824:	dec00104 	addi	sp,sp,4
    countTime();
    2828:	00025e81 	jmpi	25e8 <countTime>
}
    282c:	dfc00017 	ldw	ra,0(sp)
    2830:	dec00104 	addi	sp,sp,4
    2834:	f800283a 	ret

00002838 <showAlarmNumbers>:
  numberToSeg7(*alarmSegPtr % 10, segS0Ptr);
    2838:	d0a01e17 	ldw	r2,-32648(gp)
void showAlarmNumbers() {
    283c:	deffff04 	addi	sp,sp,-4
    2840:	dfc00015 	stw	ra,0(sp)
  numberToSeg7(*alarmSegPtr % 10, segS0Ptr);
    2844:	11000003 	ldbu	r4,0(r2)
    2848:	01400284 	movi	r5,10
    284c:	21003fcc 	andi	r4,r4,255
    2850:	0002d500 	call	2d50 <__umodsi3>
    2854:	d1600617 	ldw	r5,-32744(gp)
    2858:	11003fcc 	andi	r4,r2,255
    285c:	000267c0 	call	267c <numberToSeg7>
  numberToSeg7(*alarmSegPtr / 10, segS1Ptr);
    2860:	d0a01e17 	ldw	r2,-32648(gp)
    2864:	01400284 	movi	r5,10
    2868:	11000003 	ldbu	r4,0(r2)
    286c:	21003fcc 	andi	r4,r4,255
    2870:	0002cec0 	call	2cec <__udivsi3>
    2874:	d1600517 	ldw	r5,-32748(gp)
    2878:	11003fcc 	andi	r4,r2,255
    287c:	000267c0 	call	267c <numberToSeg7>
  numberToSeg7(*alarmMinPtr % 10, segM0Ptr);
    2880:	d0a01d17 	ldw	r2,-32652(gp)
    2884:	01400284 	movi	r5,10
    2888:	11000003 	ldbu	r4,0(r2)
    288c:	21003fcc 	andi	r4,r4,255
    2890:	0002d500 	call	2d50 <__umodsi3>
    2894:	d1600417 	ldw	r5,-32752(gp)
    2898:	11003fcc 	andi	r4,r2,255
    289c:	000267c0 	call	267c <numberToSeg7>
  numberToSeg7(*alarmMinPtr / 10, segM1Ptr);
    28a0:	d0a01d17 	ldw	r2,-32652(gp)
    28a4:	01400284 	movi	r5,10
    28a8:	11000003 	ldbu	r4,0(r2)
    28ac:	21003fcc 	andi	r4,r4,255
    28b0:	0002cec0 	call	2cec <__udivsi3>
    28b4:	d1600317 	ldw	r5,-32756(gp)
    28b8:	11003fcc 	andi	r4,r2,255
    28bc:	000267c0 	call	267c <numberToSeg7>
  numberToSeg7(*alarmHourPtr % 10, segH0Ptr);
    28c0:	d0a01c17 	ldw	r2,-32656(gp)
    28c4:	01400284 	movi	r5,10
    28c8:	11000003 	ldbu	r4,0(r2)
    28cc:	21003fcc 	andi	r4,r4,255
    28d0:	0002d500 	call	2d50 <__umodsi3>
    28d4:	d1600217 	ldw	r5,-32760(gp)
    28d8:	11003fcc 	andi	r4,r2,255
    28dc:	000267c0 	call	267c <numberToSeg7>
  numberToSeg7(*alarmHourPtr / 10, segH1Ptr);
    28e0:	d0a01c17 	ldw	r2,-32656(gp)
    28e4:	01400284 	movi	r5,10
    28e8:	11000003 	ldbu	r4,0(r2)
    28ec:	21003fcc 	andi	r4,r4,255
    28f0:	0002cec0 	call	2cec <__udivsi3>
    28f4:	d1600117 	ldw	r5,-32764(gp)
    28f8:	11003fcc 	andi	r4,r2,255
}
    28fc:	dfc00017 	ldw	ra,0(sp)
    2900:	dec00104 	addi	sp,sp,4
  numberToSeg7(*alarmHourPtr / 10, segH1Ptr);
    2904:	000267c1 	jmpi	267c <numberToSeg7>

00002908 <changeMode>:
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTMODE, 0);
    2908:	00141b35 	stwio	zero,20588(zero)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BTMODE, 0xf);
    290c:	008003c4 	movi	r2,15
    2910:	00941a35 	stwio	r2,20584(zero)
  *modePtr += 1;
    2914:	d0e02317 	ldw	r3,-32628(gp)
    2918:	18800003 	ldbu	r2,0(r3)
    291c:	10800044 	addi	r2,r2,1
    2920:	18800005 	stb	r2,0(r3)
  switch (*modePtr) {      
    2924:	d0a02317 	ldw	r2,-32628(gp)
    2928:	10800003 	ldbu	r2,0(r2)
    292c:	10803fcc 	andi	r2,r2,255
    2930:	10c000a0 	cmpeqi	r3,r2,2
    2934:	1800081e 	bne	r3,zero,2958 <changeMode+0x50>
    2938:	10c000e0 	cmpeqi	r3,r2,3
    293c:	18000a1e 	bne	r3,zero,2968 <changeMode+0x60>
    2940:	10800058 	cmpnei	r2,r2,1
    2944:	10000e1e 	bne	r2,zero,2980 <changeMode+0x78>
      *ledsPtr = 0b00100010;
    2948:	d0a00017 	ldw	r2,-32768(gp)
    294c:	00c00884 	movi	r3,34
    2950:	10c00005 	stb	r3,0(r2)
      break;
    2954:	f800283a 	ret
      *ledsPtr = 0b00100100;
    2958:	d0a00017 	ldw	r2,-32768(gp)
    295c:	00c00904 	movi	r3,36
    2960:	10c00005 	stb	r3,0(r2)
      showAlarmNumbers();
    2964:	00028381 	jmpi	2838 <showAlarmNumbers>
      *ledsPtr = 0b00000001;
    2968:	d0a00017 	ldw	r2,-32768(gp)
    296c:	00c00044 	movi	r3,1
    2970:	10c00005 	stb	r3,0(r2)
      *modePtr = 0;
    2974:	d0a02317 	ldw	r2,-32628(gp)
    2978:	10000005 	stb	zero,0(r2)
      showTimeNumbers();
    297c:	00027141 	jmpi	2714 <showTimeNumbers>
}
    2980:	f800283a 	ret

00002984 <changeTime>:
void changeTime() {
    2984:	deffff04 	addi	sp,sp,-4
    2988:	dfc00015 	stw	ra,0(sp)
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTINC, 0);
    298c:	00142335 	stwio	zero,20620(zero)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BTINC, 0xf);
    2990:	008003c4 	movi	r2,15
    2994:	00942235 	stwio	r2,20616(zero)
  if (*modePtr == 1) {
    2998:	d0a02317 	ldw	r2,-32628(gp)
    299c:	10800003 	ldbu	r2,0(r2)
    29a0:	10803fcc 	andi	r2,r2,255
    29a4:	10800058 	cmpnei	r2,r2,1
    29a8:	10000f1e 	bne	r2,zero,29e8 <changeTime+0x64>
    switch (*configPtr) {      
    29ac:	d0a01f17 	ldw	r2,-32644(gp)
    29b0:	10800003 	ldbu	r2,0(r2)
    29b4:	10803fcc 	andi	r2,r2,255
    29b8:	10c00060 	cmpeqi	r3,r2,1
    29bc:	1800201e 	bne	r3,zero,2a40 <changeTime+0xbc>
    29c0:	10c000a0 	cmpeqi	r3,r2,2
    29c4:	1800201e 	bne	r3,zero,2a48 <changeTime+0xc4>
    29c8:	1000061e 	bne	r2,zero,29e4 <changeTime+0x60>
        if (*segPtr == 59) {
    29cc:	d0e02217 	ldw	r3,-32632(gp)
        if (*minPtr == 59) {
    29d0:	18800003 	ldbu	r2,0(r3)
    29d4:	10803fcc 	andi	r2,r2,255
    29d8:	10800ed8 	cmpnei	r2,r2,59
        if (*hourPtr == 23) {
    29dc:	10001f1e 	bne	r2,zero,2a5c <changeTime+0xd8>
            *hourPtr = 0;
    29e0:	18000005 	stb	zero,0(r3)
    showTimeNumbers();
    29e4:	00027140 	call	2714 <showTimeNumbers>
  if (*modePtr == 2) {
    29e8:	d0a02317 	ldw	r2,-32628(gp)
    29ec:	10800003 	ldbu	r2,0(r2)
    29f0:	10803fcc 	andi	r2,r2,255
    29f4:	10800098 	cmpnei	r2,r2,2
    29f8:	1000271e 	bne	r2,zero,2a98 <changeTime+0x114>
    switch (*configPtr) {      
    29fc:	d0a01f17 	ldw	r2,-32644(gp)
    2a00:	10800003 	ldbu	r2,0(r2)
    2a04:	10803fcc 	andi	r2,r2,255
    2a08:	10c00060 	cmpeqi	r3,r2,1
    2a0c:	1800171e 	bne	r3,zero,2a6c <changeTime+0xe8>
    2a10:	10c000a0 	cmpeqi	r3,r2,2
    2a14:	1800171e 	bne	r3,zero,2a74 <changeTime+0xf0>
    2a18:	1000061e 	bne	r2,zero,2a34 <changeTime+0xb0>
        if (*alarmSegPtr == 59) {
    2a1c:	d0e01e17 	ldw	r3,-32648(gp)
        if (*alarmMinPtr == 59) {
    2a20:	18800003 	ldbu	r2,0(r3)
    2a24:	10803fcc 	andi	r2,r2,255
    2a28:	10800ed8 	cmpnei	r2,r2,59
        if (*alarmHourPtr == 23) {
    2a2c:	1000161e 	bne	r2,zero,2a88 <changeTime+0x104>
            *alarmHourPtr = 0;
    2a30:	18000005 	stb	zero,0(r3)
}
    2a34:	dfc00017 	ldw	ra,0(sp)
    2a38:	dec00104 	addi	sp,sp,4
    showAlarmNumbers();
    2a3c:	00028381 	jmpi	2838 <showAlarmNumbers>
        if (*minPtr == 59) {
    2a40:	d0e02117 	ldw	r3,-32636(gp)
    2a44:	003fe206 	br	29d0 <changeTime+0x4c>
        if (*hourPtr == 23) {
    2a48:	d0e02017 	ldw	r3,-32640(gp)
    2a4c:	18800003 	ldbu	r2,0(r3)
    2a50:	10803fcc 	andi	r2,r2,255
    2a54:	108005d8 	cmpnei	r2,r2,23
    2a58:	003fe006 	br	29dc <changeTime+0x58>
            *hourPtr += 1;
    2a5c:	18800003 	ldbu	r2,0(r3)
    2a60:	10800044 	addi	r2,r2,1
    2a64:	18800005 	stb	r2,0(r3)
    2a68:	003fde06 	br	29e4 <changeTime+0x60>
        if (*alarmMinPtr == 59) {
    2a6c:	d0e01d17 	ldw	r3,-32652(gp)
    2a70:	003feb06 	br	2a20 <changeTime+0x9c>
        if (*alarmHourPtr == 23) {
    2a74:	d0e01c17 	ldw	r3,-32656(gp)
    2a78:	18800003 	ldbu	r2,0(r3)
    2a7c:	10803fcc 	andi	r2,r2,255
    2a80:	108005d8 	cmpnei	r2,r2,23
    2a84:	003fe906 	br	2a2c <changeTime+0xa8>
            *alarmHourPtr += 1;
    2a88:	18800003 	ldbu	r2,0(r3)
    2a8c:	10800044 	addi	r2,r2,1
    2a90:	18800005 	stb	r2,0(r3)
    2a94:	003fe706 	br	2a34 <changeTime+0xb0>
}
    2a98:	dfc00017 	ldw	ra,0(sp)
    2a9c:	dec00104 	addi	sp,sp,4
    2aa0:	f800283a 	ret

00002aa4 <main>:
  modePtr = ramPtr + 1;
    2aa4:	d0a00717 	ldw	r2,-32740(gp)
int main() { 
    2aa8:	deffff04 	addi	sp,sp,-4
    2aac:	dfc00015 	stw	ra,0(sp)
  modePtr = ramPtr + 1;
    2ab0:	10c00044 	addi	r3,r2,1
    2ab4:	d0e02315 	stw	r3,-32628(gp)
  segPtr = ramPtr + 2;
    2ab8:	10c00084 	addi	r3,r2,2
    2abc:	d0e02215 	stw	r3,-32632(gp)
  minPtr = ramPtr + 3;
    2ac0:	10c000c4 	addi	r3,r2,3
    2ac4:	d0e02115 	stw	r3,-32636(gp)
  hourPtr = ramPtr + 4;
    2ac8:	10c00104 	addi	r3,r2,4
    2acc:	d0e02015 	stw	r3,-32640(gp)
  configPtr = ramPtr + 5;
    2ad0:	10c00144 	addi	r3,r2,5
    2ad4:	d0e01f15 	stw	r3,-32644(gp)
  alarmSegPtr  = ramPtr + 6;
    2ad8:	10c00184 	addi	r3,r2,6
    2adc:	d0e01e15 	stw	r3,-32648(gp)
  alarmMinPtr = ramPtr + 7;
    2ae0:	10c001c4 	addi	r3,r2,7
    2ae4:	d0e01d15 	stw	r3,-32652(gp)
  alarmHourPtr = ramPtr + 8;
    2ae8:	10c00204 	addi	r3,r2,8
    2aec:	d0e01c15 	stw	r3,-32656(gp)
  blinkPtr = ramPtr + 9;
    2af0:	10c00244 	addi	r3,r2,9
    2af4:	d0e01b15 	stw	r3,-32660(gp)
  uartSeg0Ptr = ramPtr + 10;
    2af8:	10c00284 	addi	r3,r2,10
    2afc:	d0e01a15 	stw	r3,-32664(gp)
  uartSeg1Ptr = ramPtr + 11;
    2b00:	10c002c4 	addi	r3,r2,11
    2b04:	d0e01915 	stw	r3,-32668(gp)
  uartMin0Ptr = ramPtr + 12;
    2b08:	10c00304 	addi	r3,r2,12
    2b0c:	d0e01815 	stw	r3,-32672(gp)
  uartMin1Ptr = ramPtr + 13;
    2b10:	10c00344 	addi	r3,r2,13
    2b14:	d0e01715 	stw	r3,-32676(gp)
  uartHour0Ptr = ramPtr + 14;
    2b18:	10c00384 	addi	r3,r2,14
    2b1c:	d0e01615 	stw	r3,-32680(gp)
  uartHour1Ptr = ramPtr + 15;
    2b20:	10c003c4 	addi	r3,r2,15
  uartCounterPtr = ramPtr + 16;
    2b24:	10800404 	addi	r2,r2,16
    2b28:	d0a01415 	stw	r2,-32688(gp)
  *segS0Ptr = 0;
    2b2c:	d0a00617 	ldw	r2,-32744(gp)
  uartHour1Ptr = ramPtr + 15;
    2b30:	d0e01515 	stw	r3,-32684(gp)
  *alarmHourPtr = 12;
    2b34:	00c00304 	movi	r3,12
  *segS0Ptr = 0;
    2b38:	10000005 	stb	zero,0(r2)
  *segS1Ptr = 0;
    2b3c:	d0a00517 	ldw	r2,-32748(gp)
    2b40:	10000005 	stb	zero,0(r2)
  *segM0Ptr = 0;
    2b44:	d0a00417 	ldw	r2,-32752(gp)
    2b48:	10000005 	stb	zero,0(r2)
  *segM1Ptr = 0;
    2b4c:	d0a00317 	ldw	r2,-32756(gp)
    2b50:	10000005 	stb	zero,0(r2)
  *segH0Ptr = 0;
    2b54:	d0a00217 	ldw	r2,-32760(gp)
    2b58:	10000005 	stb	zero,0(r2)
  *segH1Ptr = 0;
    2b5c:	d0a00117 	ldw	r2,-32764(gp)
    2b60:	10000005 	stb	zero,0(r2)
  *uartSeg0Ptr = 0;
    2b64:	d0a01a17 	ldw	r2,-32664(gp)
    2b68:	10000005 	stb	zero,0(r2)
  *uartSeg1Ptr = 0;
    2b6c:	d0a01917 	ldw	r2,-32668(gp)
    2b70:	10000005 	stb	zero,0(r2)
  *uartMin0Ptr = 0;
    2b74:	d0a01817 	ldw	r2,-32672(gp)
    2b78:	10000005 	stb	zero,0(r2)
  *uartMin1Ptr = 0;
    2b7c:	d0a01717 	ldw	r2,-32676(gp)
    2b80:	10000005 	stb	zero,0(r2)
  *uartHour0Ptr = 0;
    2b84:	d0a01617 	ldw	r2,-32680(gp)
    2b88:	10000005 	stb	zero,0(r2)
  *uartHour1Ptr = 0;
    2b8c:	d0a01517 	ldw	r2,-32684(gp)
    2b90:	10000005 	stb	zero,0(r2)
  *uartCounterPtr = 0;
    2b94:	d0a01417 	ldw	r2,-32688(gp)
    2b98:	10000005 	stb	zero,0(r2)
  *modePtr = 0;
    2b9c:	d0a02317 	ldw	r2,-32628(gp)
    2ba0:	10000005 	stb	zero,0(r2)
  *segPtr = 0;
    2ba4:	d0a02217 	ldw	r2,-32632(gp)
    2ba8:	10000005 	stb	zero,0(r2)
  *minPtr = 0;
    2bac:	d0a02117 	ldw	r2,-32636(gp)
    2bb0:	10000005 	stb	zero,0(r2)
  *hourPtr = 0;
    2bb4:	d0a02017 	ldw	r2,-32640(gp)
    2bb8:	10000005 	stb	zero,0(r2)
  *configPtr = 0;
    2bbc:	d0a01f17 	ldw	r2,-32644(gp)
    2bc0:	10000005 	stb	zero,0(r2)
  *alarmSegPtr = 0;
    2bc4:	d0a01e17 	ldw	r2,-32648(gp)
    2bc8:	10000005 	stb	zero,0(r2)
  *alarmMinPtr = 0;
    2bcc:	d0a01d17 	ldw	r2,-32652(gp)
    2bd0:	10000005 	stb	zero,0(r2)
  *alarmHourPtr = 12;
    2bd4:	d0a01c17 	ldw	r2,-32656(gp)
    2bd8:	10c00005 	stb	r3,0(r2)
  *blinkPtr = 0;
    2bdc:	d0a01b17 	ldw	r2,-32660(gp)
  *ledsPtr = 0b00000001;
    2be0:	00c00044 	movi	r3,1
  *blinkPtr = 0;
    2be4:	10000005 	stb	zero,0(r2)
  *ledsPtr = 0b00000001;
    2be8:	d0a00017 	ldw	r2,-32768(gp)
    2bec:	10c00005 	stb	r3,0(r2)
  initializeInterrupts();
    2bf0:	00024580 	call	2458 <initializeInterrupts>
  while (1);
    2bf4:	003fff06 	br	2bf4 <main+0x150>

00002bf8 <__divsi3>:
    2bf8:	20001a16 	blt	r4,zero,2c64 <__divsi3+0x6c>
    2bfc:	000f883a 	mov	r7,zero
    2c00:	2800020e 	bge	r5,zero,2c0c <__divsi3+0x14>
    2c04:	014bc83a 	sub	r5,zero,r5
    2c08:	39c0005c 	xori	r7,r7,1
    2c0c:	200d883a 	mov	r6,r4
    2c10:	00c00044 	movi	r3,1
    2c14:	2900092e 	bgeu	r5,r4,2c3c <__divsi3+0x44>
    2c18:	00800804 	movi	r2,32
    2c1c:	00c00044 	movi	r3,1
    2c20:	00000106 	br	2c28 <__divsi3+0x30>
    2c24:	10001226 	beq	r2,zero,2c70 <__divsi3+0x78>
    2c28:	294b883a 	add	r5,r5,r5
    2c2c:	10bfffc4 	addi	r2,r2,-1
    2c30:	18c7883a 	add	r3,r3,r3
    2c34:	293ffb36 	bltu	r5,r4,2c24 <__divsi3+0x2c>
    2c38:	18000d26 	beq	r3,zero,2c70 <__divsi3+0x78>
    2c3c:	0005883a 	mov	r2,zero
    2c40:	31400236 	bltu	r6,r5,2c4c <__divsi3+0x54>
    2c44:	314dc83a 	sub	r6,r6,r5
    2c48:	10c4b03a 	or	r2,r2,r3
    2c4c:	1806d07a 	srli	r3,r3,1
    2c50:	280ad07a 	srli	r5,r5,1
    2c54:	183ffa1e 	bne	r3,zero,2c40 <__divsi3+0x48>
    2c58:	38000126 	beq	r7,zero,2c60 <__divsi3+0x68>
    2c5c:	0085c83a 	sub	r2,zero,r2
    2c60:	f800283a 	ret
    2c64:	0109c83a 	sub	r4,zero,r4
    2c68:	01c00044 	movi	r7,1
    2c6c:	003fe406 	br	2c00 <__divsi3+0x8>
    2c70:	0005883a 	mov	r2,zero
    2c74:	003ff806 	br	2c58 <__divsi3+0x60>

00002c78 <__modsi3>:
    2c78:	20001916 	blt	r4,zero,2ce0 <__modsi3+0x68>
    2c7c:	000f883a 	mov	r7,zero
    2c80:	2005883a 	mov	r2,r4
    2c84:	2800010e 	bge	r5,zero,2c8c <__modsi3+0x14>
    2c88:	014bc83a 	sub	r5,zero,r5
    2c8c:	00c00044 	movi	r3,1
    2c90:	2900092e 	bgeu	r5,r4,2cb8 <__modsi3+0x40>
    2c94:	01800804 	movi	r6,32
    2c98:	00c00044 	movi	r3,1
    2c9c:	00000106 	br	2ca4 <__modsi3+0x2c>
    2ca0:	30000d26 	beq	r6,zero,2cd8 <__modsi3+0x60>
    2ca4:	294b883a 	add	r5,r5,r5
    2ca8:	31bfffc4 	addi	r6,r6,-1
    2cac:	18c7883a 	add	r3,r3,r3
    2cb0:	293ffb36 	bltu	r5,r4,2ca0 <__modsi3+0x28>
    2cb4:	18000826 	beq	r3,zero,2cd8 <__modsi3+0x60>
    2cb8:	1806d07a 	srli	r3,r3,1
    2cbc:	11400136 	bltu	r2,r5,2cc4 <__modsi3+0x4c>
    2cc0:	1145c83a 	sub	r2,r2,r5
    2cc4:	280ad07a 	srli	r5,r5,1
    2cc8:	183ffb1e 	bne	r3,zero,2cb8 <__modsi3+0x40>
    2ccc:	38000126 	beq	r7,zero,2cd4 <__modsi3+0x5c>
    2cd0:	0085c83a 	sub	r2,zero,r2
    2cd4:	f800283a 	ret
    2cd8:	2005883a 	mov	r2,r4
    2cdc:	003ffb06 	br	2ccc <__modsi3+0x54>
    2ce0:	0109c83a 	sub	r4,zero,r4
    2ce4:	01c00044 	movi	r7,1
    2ce8:	003fe506 	br	2c80 <__modsi3+0x8>

00002cec <__udivsi3>:
    2cec:	200d883a 	mov	r6,r4
    2cf0:	2900152e 	bgeu	r5,r4,2d48 <__udivsi3+0x5c>
    2cf4:	28001416 	blt	r5,zero,2d48 <__udivsi3+0x5c>
    2cf8:	00800804 	movi	r2,32
    2cfc:	00c00044 	movi	r3,1
    2d00:	00000206 	br	2d0c <__udivsi3+0x20>
    2d04:	10000e26 	beq	r2,zero,2d40 <__udivsi3+0x54>
    2d08:	28000516 	blt	r5,zero,2d20 <__udivsi3+0x34>
    2d0c:	294b883a 	add	r5,r5,r5
    2d10:	10bfffc4 	addi	r2,r2,-1
    2d14:	18c7883a 	add	r3,r3,r3
    2d18:	293ffa36 	bltu	r5,r4,2d04 <__udivsi3+0x18>
    2d1c:	18000826 	beq	r3,zero,2d40 <__udivsi3+0x54>
    2d20:	0005883a 	mov	r2,zero
    2d24:	31400236 	bltu	r6,r5,2d30 <__udivsi3+0x44>
    2d28:	314dc83a 	sub	r6,r6,r5
    2d2c:	10c4b03a 	or	r2,r2,r3
    2d30:	1806d07a 	srli	r3,r3,1
    2d34:	280ad07a 	srli	r5,r5,1
    2d38:	183ffa1e 	bne	r3,zero,2d24 <__udivsi3+0x38>
    2d3c:	f800283a 	ret
    2d40:	0005883a 	mov	r2,zero
    2d44:	f800283a 	ret
    2d48:	00c00044 	movi	r3,1
    2d4c:	003ff406 	br	2d20 <__udivsi3+0x34>

00002d50 <__umodsi3>:
    2d50:	2005883a 	mov	r2,r4
    2d54:	2900132e 	bgeu	r5,r4,2da4 <__umodsi3+0x54>
    2d58:	28001216 	blt	r5,zero,2da4 <__umodsi3+0x54>
    2d5c:	01800804 	movi	r6,32
    2d60:	00c00044 	movi	r3,1
    2d64:	00000206 	br	2d70 <__umodsi3+0x20>
    2d68:	30000c26 	beq	r6,zero,2d9c <__umodsi3+0x4c>
    2d6c:	28000516 	blt	r5,zero,2d84 <__umodsi3+0x34>
    2d70:	294b883a 	add	r5,r5,r5
    2d74:	31bfffc4 	addi	r6,r6,-1
    2d78:	18c7883a 	add	r3,r3,r3
    2d7c:	293ffa36 	bltu	r5,r4,2d68 <__umodsi3+0x18>
    2d80:	18000626 	beq	r3,zero,2d9c <__umodsi3+0x4c>
    2d84:	1806d07a 	srli	r3,r3,1
    2d88:	11400136 	bltu	r2,r5,2d90 <__umodsi3+0x40>
    2d8c:	1145c83a 	sub	r2,r2,r5
    2d90:	280ad07a 	srli	r5,r5,1
    2d94:	183ffb1e 	bne	r3,zero,2d84 <__umodsi3+0x34>
    2d98:	f800283a 	ret
    2d9c:	2005883a 	mov	r2,r4
    2da0:	f800283a 	ret
    2da4:	00c00044 	movi	r3,1
    2da8:	003ff606 	br	2d84 <__umodsi3+0x34>

00002dac <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    2dac:	0002e381 	jmpi	2e38 <alt_iic_isr_register>

00002db0 <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
    2db0:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2db4:	00bfff84 	movi	r2,-2
    2db8:	1884703a 	and	r2,r3,r2
    2dbc:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    2dc0:	00800044 	movi	r2,1
    2dc4:	d1202717 	ldw	r4,-32612(gp)
    2dc8:	114a983a 	sll	r5,r2,r5
    2dcc:	290ab03a 	or	r5,r5,r4
    2dd0:	d1602715 	stw	r5,-32612(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2dd4:	d0a02717 	ldw	r2,-32612(gp)
    2dd8:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
    2ddc:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    2de0:	0005883a 	mov	r2,zero
    2de4:	f800283a 	ret

00002de8 <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
    2de8:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2dec:	00bfff84 	movi	r2,-2
    2df0:	1884703a 	and	r2,r3,r2
    2df4:	1001703a 	wrctl	status,r2
  alt_irq_active &= ~(1 << id);
    2df8:	00bfff84 	movi	r2,-2
    2dfc:	d1202717 	ldw	r4,-32612(gp)
    2e00:	114a183a 	rol	r5,r2,r5
    2e04:	290a703a 	and	r5,r5,r4
    2e08:	d1602715 	stw	r5,-32612(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2e0c:	d0a02717 	ldw	r2,-32612(gp)
    2e10:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
    2e14:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    2e18:	0005883a 	mov	r2,zero
    2e1c:	f800283a 	ret

00002e20 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    2e20:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    2e24:	00800044 	movi	r2,1
    2e28:	1144983a 	sll	r2,r2,r5
    2e2c:	10c4703a 	and	r2,r2,r3
}
    2e30:	1004c03a 	cmpne	r2,r2,zero
    2e34:	f800283a 	ret

00002e38 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2e38:	28800808 	cmpgei	r2,r5,32
    2e3c:	1000161e 	bne	r2,zero,2e98 <alt_iic_isr_register+0x60>
{
    2e40:	defffe04 	addi	sp,sp,-8
    2e44:	dfc00115 	stw	ra,4(sp)
    2e48:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
    2e4c:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2e50:	00bfff84 	movi	r2,-2
    2e54:	8084703a 	and	r2,r16,r2
    2e58:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    2e5c:	280690fa 	slli	r3,r5,3
    2e60:	00800034 	movhi	r2,0
    2e64:	108c5704 	addi	r2,r2,12636
    2e68:	10c5883a 	add	r2,r2,r3
    2e6c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    2e70:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    2e74:	30000626 	beq	r6,zero,2e90 <alt_iic_isr_register+0x58>
    2e78:	0002db00 	call	2db0 <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
    2e7c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    2e80:	dfc00117 	ldw	ra,4(sp)
    2e84:	dc000017 	ldw	r16,0(sp)
    2e88:	dec00204 	addi	sp,sp,8
    2e8c:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    2e90:	0002de80 	call	2de8 <alt_ic_irq_disable>
    2e94:	003ff906 	br	2e7c <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
    2e98:	00bffa84 	movi	r2,-22
}
    2e9c:	f800283a 	ret

00002ea0 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2ea0:	20800828 	cmpgeui	r2,r4,32
    2ea4:	1000201e 	bne	r2,zero,2f28 <alt_irq_register+0x88>
  NIOS2_READ_STATUS (context);
    2ea8:	000f303a 	rdctl	r7,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2eac:	00ffff84 	movi	r3,-2
    2eb0:	38c4703a 	and	r2,r7,r3
    2eb4:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    2eb8:	201090fa 	slli	r8,r4,3
    2ebc:	00800034 	movhi	r2,0
    2ec0:	108c5704 	addi	r2,r2,12636
    2ec4:	1205883a 	add	r2,r2,r8
    2ec8:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    2ecc:	11400115 	stw	r5,4(r2)
  alt_irq_active |= (1 << id);
    2ed0:	00800044 	movi	r2,1
    2ed4:	1108983a 	sll	r4,r2,r4

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    2ed8:	30000c26 	beq	r6,zero,2f0c <alt_irq_register+0x6c>
  NIOS2_READ_STATUS (context);
    2edc:	0005303a 	rdctl	r2,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2ee0:	10c6703a 	and	r3,r2,r3
    2ee4:	1801703a 	wrctl	status,r3
    2ee8:	d0e02717 	ldw	r3,-32612(gp)
    2eec:	20c8b03a 	or	r4,r4,r3
  alt_irq_active &= ~(1 << id);
    2ef0:	d1202715 	stw	r4,-32612(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2ef4:	d0e02717 	ldw	r3,-32612(gp)
    2ef8:	180170fa 	wrctl	ienable,r3
  NIOS2_WRITE_STATUS (context);
    2efc:	1001703a 	wrctl	status,r2
    2f00:	3801703a 	wrctl	status,r7
    2f04:	0005883a 	mov	r2,zero
}
    2f08:	f800283a 	ret
  NIOS2_READ_STATUS (context);
    2f0c:	0005303a 	rdctl	r2,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2f10:	10c6703a 	and	r3,r2,r3
    2f14:	1801703a 	wrctl	status,r3
  alt_irq_active &= ~(1 << id);
    2f18:	d0e02717 	ldw	r3,-32612(gp)
    2f1c:	0108303a 	nor	r4,zero,r4
    2f20:	20c8703a 	and	r4,r4,r3
    2f24:	003ff206 	br	2ef0 <alt_irq_register+0x50>
  int rc = -EINVAL;  
    2f28:	00bffa84 	movi	r2,-22

    alt_irq_enable_all(status);
  }
  return rc; 
}
    2f2c:	f800283a 	ret

00002f30 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2f30:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2f34:	01000034 	movhi	r4,0
    2f38:	01400034 	movhi	r5,0
    2f3c:	dfc00015 	stw	ra,0(sp)
    2f40:	210c2b04 	addi	r4,r4,12460
    2f44:	294c3504 	addi	r5,r5,12500
    2f48:	21400426 	beq	r4,r5,2f5c <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
    2f4c:	01800034 	movhi	r6,0
    2f50:	318c3504 	addi	r6,r6,12500
    2f54:	310dc83a 	sub	r6,r6,r4
    2f58:	00030840 	call	3084 <memcpy>
  if (to != from)
    2f5c:	01000034 	movhi	r4,0
    2f60:	01400034 	movhi	r5,0
    2f64:	21080804 	addi	r4,r4,8224
    2f68:	29480804 	addi	r5,r5,8224
    2f6c:	21400426 	beq	r4,r5,2f80 <alt_load+0x50>
      *to++ = *from++;
    2f70:	01800034 	movhi	r6,0
    2f74:	31886004 	addi	r6,r6,8576
    2f78:	310dc83a 	sub	r6,r6,r4
    2f7c:	00030840 	call	3084 <memcpy>
  if (to != from)
    2f80:	01000034 	movhi	r4,0
    2f84:	01400034 	movhi	r5,0
    2f88:	210c2b04 	addi	r4,r4,12460
    2f8c:	294c2b04 	addi	r5,r5,12460
    2f90:	21400426 	beq	r4,r5,2fa4 <alt_load+0x74>
      *to++ = *from++;
    2f94:	01800034 	movhi	r6,0
    2f98:	318c2b04 	addi	r6,r6,12460
    2f9c:	310dc83a 	sub	r6,r6,r4
    2fa0:	00030840 	call	3084 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2fa4:	00030040 	call	3004 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    2fa8:	dfc00017 	ldw	ra,0(sp)
    2fac:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
    2fb0:	00030081 	jmpi	3008 <alt_icache_flush_all>

00002fb4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2fb4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2fb8:	0009883a 	mov	r4,zero
{
    2fbc:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
    2fc0:	0002fe00 	call	2fe0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2fc4:	00030000 	call	3000 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2fc8:	d1a02817 	ldw	r6,-32608(gp)
    2fcc:	d1602917 	ldw	r5,-32604(gp)
    2fd0:	d1202a17 	ldw	r4,-32600(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2fd4:	dfc00017 	ldw	ra,0(sp)
    2fd8:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
    2fdc:	0002aa41 	jmpi	2aa4 <main>

00002fe0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2fe0:	deffff04 	addi	sp,sp,-4
    2fe4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
    2fe8:	000307c0 	call	307c <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    2fec:	00800044 	movi	r2,1
    2ff0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2ff4:	dfc00017 	ldw	ra,0(sp)
    2ff8:	dec00104 	addi	sp,sp,4
    2ffc:	f800283a 	ret

00003000 <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, TIMER);
    ALTERA_AVALON_UART_INIT ( UART, UART);
}
    3000:	f800283a 	ret

00003004 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    3004:	f800283a 	ret

00003008 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    3008:	f800283a 	ret

0000300c <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    300c:	213ffe84 	addi	r4,r4,-6
    3010:	20800428 	cmpgeui	r2,r4,16
    3014:	1000151e 	bne	r2,zero,306c <alt_exception_cause_generated_bad_addr+0x60>
    3018:	200890ba 	slli	r4,r4,2
    301c:	00800034 	movhi	r2,0
    3020:	2085883a 	add	r2,r4,r2
    3024:	108c0b17 	ldw	r2,12332(r2)
    3028:	1000683a 	jmp	r2
    302c:	00003074 	movhi	zero,193
    3030:	00003074 	movhi	zero,193
    3034:	0000306c 	andhi	zero,zero,193
    3038:	0000306c 	andhi	zero,zero,193
    303c:	0000306c 	andhi	zero,zero,193
    3040:	00003074 	movhi	zero,193
    3044:	0000306c 	andhi	zero,zero,193
    3048:	0000306c 	andhi	zero,zero,193
    304c:	00003074 	movhi	zero,193
    3050:	00003074 	movhi	zero,193
    3054:	0000306c 	andhi	zero,zero,193
    3058:	00003074 	movhi	zero,193
    305c:	0000306c 	andhi	zero,zero,193
    3060:	0000306c 	andhi	zero,zero,193
    3064:	0000306c 	andhi	zero,zero,193
    3068:	00003074 	movhi	zero,193
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    306c:	0005883a 	mov	r2,zero
    3070:	f800283a 	ret
    3074:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    3078:	f800283a 	ret

0000307c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    307c:	000170fa 	wrctl	ienable,zero
}
    3080:	f800283a 	ret

00003084 <memcpy>:
    3084:	2005883a 	mov	r2,r4
    3088:	0007883a 	mov	r3,zero
    308c:	30c0011e 	bne	r6,r3,3094 <memcpy+0x10>
    3090:	f800283a 	ret
    3094:	28cf883a 	add	r7,r5,r3
    3098:	39c00003 	ldbu	r7,0(r7)
    309c:	10c9883a 	add	r4,r2,r3
    30a0:	18c00044 	addi	r3,r3,1
    30a4:	21c00005 	stb	r7,0(r4)
    30a8:	003ff806 	br	308c <memcpy+0x8>
