/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "sys/alt_stdio.h"
#include "sys/alt_irq.h"
#include "altera_avalon_timer_regs.h"
#include "system.h"

volatile unsigned char* ramPtr = (unsigned char *) 0x1000;
volatile unsigned char* modePtr;
volatile unsigned char* segPtr;
volatile unsigned char* minPtr;
volatile unsigned char* hourPtr;
volatile unsigned char* timerPtr = (unsigned char *) 0x4000;

volatile unsigned char* segS0Ptr = (unsigned char *) 0x5000;
volatile unsigned char* segS1Ptr = (unsigned char *) 0x5010;
volatile unsigned char* segM0Ptr = (unsigned char *) 0x5020;
volatile unsigned char* segM1Ptr = (unsigned char *) 0x5030;
volatile unsigned char* segH0Ptr = (unsigned char *) 0x5040;
volatile unsigned char* segH1Ptr = (unsigned char *) 0x5050;

void initializeTimer();
void handleTimer();
void countTime();

void showNumbers();
void numberToSeg7(int num,volatile  unsigned char* seg7);

int main() { 

  modePtr = ramPtr + 1;
  segPtr = ramPtr + 2;
  minPtr = ramPtr + 3;
  hourPtr = ramPtr + 4;

  *segS0Ptr = 0;
  *segS1Ptr = 0;
  *segM0Ptr = 0;
  *segM1Ptr = 0;
  *segH0Ptr = 0;
  *segH1Ptr = 0;

  *modePtr = 0;
  
  *segPtr = 0;
  *minPtr = 0;
  *hourPtr = 0;
  
  //initializeTimer();

  /*numberToSeg7(0, segS0Ptr);
  numberToSeg7(1, segS1Ptr);
  numberToSeg7(2, segM0Ptr);
  numberToSeg7(3, segM1Ptr);
  numberToSeg7(4, segH0Ptr);
  numberToSeg7(5, segH1Ptr);*/
  /*

  *segS0Ptr = 0b0000000; // 0

    *segS1Ptr = 0b1111111; // 1

    *segM0Ptr = 0b1111111; // 2

    *segM1Ptr = 0b1111111; // 3

    *segH0Ptr = 0b1111111; // 4

    *segH1Ptr = 0b1111111;*/

  *segS0Ptr = 0b1000000; // 0

  *segS1Ptr = 0b1111001; // 1

  *segM0Ptr = 0b0100100; // 2

  *segM1Ptr = 0b0110000; // 3

  *segH0Ptr = 0b0011001; // 4

  *segH1Ptr = 0b0010010; // 5

  *segS0Ptr = 0b0000010; // 6

  *segS1Ptr = 0b1111000; // 7

  *segM0Ptr = 0b0011000; // 8

  *segM1Ptr = 0b0011000; //9







  while (1);

  return 0;

}

void initializeTimer() {

	alt_irq_register(TIMER_IRQ, 0, handleTimer);

	IOWR_ALTERA_AVALON_TIMER_CONTROL(timerPtr,
		  ALTERA_AVALON_TIMER_CONTROL_CONT_MSK
		| ALTERA_AVALON_TIMER_CONTROL_START_MSK
		| ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);

  return;

}

void handleTimer() {

  IOWR_ALTERA_AVALON_TIMER_STATUS(timerPtr, 0);

  switch (*modePtr) {
    case 0:  //Normal
      countTime();
      break;
      
    case 1:  //Alarma

      break;

    case 2:  //Config
    
      break;
      
  }

  showNumbers();

  return;

}

void countTime() {
  
  *segPtr++;
  
  if (*segPtr == 60) {
    *minPtr += 1;
    *segPtr = 0;
  }
  if (*minPtr == 60) {
    *hourPtr += 1;
    *minPtr = 0;
  }
  if (*hourPtr == 24) {
    *hourPtr = 0;
    *minPtr = 0;
    *segPtr = 0;
  }

  return;
  
}

void showNumbers() {

  *segPtr = 0;
  numberToSeg7(*segPtr % 10, segS0Ptr);
  numberToSeg7(*segPtr / 10, segS1Ptr);

  *minPtr = 0;
  numberToSeg7(*minPtr % 10, segM0Ptr);
  numberToSeg7(*minPtr / 10, segM1Ptr);

  *hourPtr = 0;
  numberToSeg7(*hourPtr % 10, segH0Ptr);
  numberToSeg7(*hourPtr / 10, segH1Ptr);

  return;

}

void numberToSeg7(int num, volatile unsigned char* seg7) {
  
  switch (num) {
    case 0:
      *seg7 = 0b0111111;
      break;

    case 1:
      *seg7 = 0b0000110; 
      break;

    case 2:
      *seg7 = 0b1011011; 
      break;
      
    case 3:
      *seg7 = 0b1001111;
      break;
  
    case 4:
      *seg7 = 0b1100110;
      break;

    case 5:
      *seg7 = 0b1101101;
      break;

    case 6:
      *seg7 = 0b1111101;
      break;

    case 7:
      *seg7 = 0b0000111;
      break;

    case 8: 
      *seg7 = 0b1111111;
      break;

    case 9:
      *seg7 = 0b1100111;
      break;

  }
  alt_printf("seg7 -> %x \n ", *seg7);
  
  return;

}
